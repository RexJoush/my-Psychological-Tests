{"version":3,"sources":["ipaddr.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function() {\r\n  var expandIPv6, ipaddr, ipv4Part, ipv4Regexes, ipv6Part, ipv6Regexes, matchCIDR, root, zoneIndex;\r\n\r\n  ipaddr = {};\r\n\r\n  root = this;\r\n\r\n  if ((typeof module !== \"undefined\" && module !== null) && module.exports) {\r\n    module.exports = ipaddr;\r\n  } else {\r\n    root['ipaddr'] = ipaddr;\r\n  }\r\n\r\n  matchCIDR = function(first, second, partSize, cidrBits) {\r\n    var part, shift;\r\n    if (first.length !== second.length) {\r\n      throw new Error(\"ipaddr: cannot match CIDR for objects with different lengths\");\r\n    }\r\n    part = 0;\r\n    while (cidrBits > 0) {\r\n      shift = partSize - cidrBits;\r\n      if (shift < 0) {\r\n        shift = 0;\r\n      }\r\n      if (first[part] >> shift !== second[part] >> shift) {\r\n        return false;\r\n      }\r\n      cidrBits -= partSize;\r\n      part += 1;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  ipaddr.subnetMatch = function(address, rangeList, defaultName) {\r\n    var k, len, rangeName, rangeSubnets, subnet;\r\n    if (defaultName == null) {\r\n      defaultName = 'unicast';\r\n    }\r\n    for (rangeName in rangeList) {\r\n      rangeSubnets = rangeList[rangeName];\r\n      if (rangeSubnets[0] && !(rangeSubnets[0] instanceof Array)) {\r\n        rangeSubnets = [rangeSubnets];\r\n      }\r\n      for (k = 0, len = rangeSubnets.length; k < len; k++) {\r\n        subnet = rangeSubnets[k];\r\n        if (address.kind() === subnet[0].kind()) {\r\n          if (address.match.apply(address, subnet)) {\r\n            return rangeName;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return defaultName;\r\n  };\r\n\r\n  ipaddr.IPv4 = (function() {\r\n    function IPv4(octets) {\r\n      var k, len, octet;\r\n      if (octets.length !== 4) {\r\n        throw new Error(\"ipaddr: ipv4 octet count should be 4\");\r\n      }\r\n      for (k = 0, len = octets.length; k < len; k++) {\r\n        octet = octets[k];\r\n        if (!((0 <= octet && octet <= 255))) {\r\n          throw new Error(\"ipaddr: ipv4 octet should fit in 8 bits\");\r\n        }\r\n      }\r\n      this.octets = octets;\r\n    }\r\n\r\n    IPv4.prototype.kind = function() {\r\n      return 'ipv4';\r\n    };\r\n\r\n    IPv4.prototype.toString = function() {\r\n      return this.octets.join(\".\");\r\n    };\r\n\r\n    IPv4.prototype.toNormalizedString = function() {\r\n      return this.toString();\r\n    };\r\n\r\n    IPv4.prototype.toByteArray = function() {\r\n      return this.octets.slice(0);\r\n    };\r\n\r\n    IPv4.prototype.match = function(other, cidrRange) {\r\n      var ref;\r\n      if (cidrRange === void 0) {\r\n        ref = other, other = ref[0], cidrRange = ref[1];\r\n      }\r\n      if (other.kind() !== 'ipv4') {\r\n        throw new Error(\"ipaddr: cannot match ipv4 address with non-ipv4 one\");\r\n      }\r\n      return matchCIDR(this.octets, other.octets, 8, cidrRange);\r\n    };\r\n\r\n    IPv4.prototype.SpecialRanges = {\r\n      unspecified: [[new IPv4([0, 0, 0, 0]), 8]],\r\n      broadcast: [[new IPv4([255, 255, 255, 255]), 32]],\r\n      multicast: [[new IPv4([224, 0, 0, 0]), 4]],\r\n      linkLocal: [[new IPv4([169, 254, 0, 0]), 16]],\r\n      loopback: [[new IPv4([127, 0, 0, 0]), 8]],\r\n      carrierGradeNat: [[new IPv4([100, 64, 0, 0]), 10]],\r\n      \"private\": [[new IPv4([10, 0, 0, 0]), 8], [new IPv4([172, 16, 0, 0]), 12], [new IPv4([192, 168, 0, 0]), 16]],\r\n      reserved: [[new IPv4([192, 0, 0, 0]), 24], [new IPv4([192, 0, 2, 0]), 24], [new IPv4([192, 88, 99, 0]), 24], [new IPv4([198, 51, 100, 0]), 24], [new IPv4([203, 0, 113, 0]), 24], [new IPv4([240, 0, 0, 0]), 4]]\r\n    };\r\n\r\n    IPv4.prototype.range = function() {\r\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\r\n    };\r\n\r\n    IPv4.prototype.toIPv4MappedAddress = function() {\r\n      return ipaddr.IPv6.parse(\"::ffff:\" + (this.toString()));\r\n    };\r\n\r\n    IPv4.prototype.prefixLengthFromSubnetMask = function() {\r\n      var cidr, i, k, octet, stop, zeros, zerotable;\r\n      zerotable = {\r\n        0: 8,\r\n        128: 7,\r\n        192: 6,\r\n        224: 5,\r\n        240: 4,\r\n        248: 3,\r\n        252: 2,\r\n        254: 1,\r\n        255: 0\r\n      };\r\n      cidr = 0;\r\n      stop = false;\r\n      for (i = k = 3; k >= 0; i = k += -1) {\r\n        octet = this.octets[i];\r\n        if (octet in zerotable) {\r\n          zeros = zerotable[octet];\r\n          if (stop && zeros !== 0) {\r\n            return null;\r\n          }\r\n          if (zeros !== 8) {\r\n            stop = true;\r\n          }\r\n          cidr += zeros;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n      return 32 - cidr;\r\n    };\r\n\r\n    return IPv4;\r\n\r\n  })();\r\n\r\n  ipv4Part = \"(0?\\\\d+|0x[a-f0-9]+)\";\r\n\r\n  ipv4Regexes = {\r\n    fourOctet: new RegExp(\"^\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"$\", 'i'),\r\n    longValue: new RegExp(\"^\" + ipv4Part + \"$\", 'i')\r\n  };\r\n\r\n  ipaddr.IPv4.parser = function(string) {\r\n    var match, parseIntAuto, part, shift, value;\r\n    parseIntAuto = function(string) {\r\n      if (string[0] === \"0\" && string[1] !== \"x\") {\r\n        return parseInt(string, 8);\r\n      } else {\r\n        return parseInt(string);\r\n      }\r\n    };\r\n    if (match = string.match(ipv4Regexes.fourOctet)) {\r\n      return (function() {\r\n        var k, len, ref, results;\r\n        ref = match.slice(1, 6);\r\n        results = [];\r\n        for (k = 0, len = ref.length; k < len; k++) {\r\n          part = ref[k];\r\n          results.push(parseIntAuto(part));\r\n        }\r\n        return results;\r\n      })();\r\n    } else if (match = string.match(ipv4Regexes.longValue)) {\r\n      value = parseIntAuto(match[1]);\r\n      if (value > 0xffffffff || value < 0) {\r\n        throw new Error(\"ipaddr: address outside defined range\");\r\n      }\r\n      return ((function() {\r\n        var k, results;\r\n        results = [];\r\n        for (shift = k = 0; k <= 24; shift = k += 8) {\r\n          results.push((value >> shift) & 0xff);\r\n        }\r\n        return results;\r\n      })()).reverse();\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv6 = (function() {\r\n    function IPv6(parts, zoneId) {\r\n      var i, k, l, len, part, ref;\r\n      if (parts.length === 16) {\r\n        this.parts = [];\r\n        for (i = k = 0; k <= 14; i = k += 2) {\r\n          this.parts.push((parts[i] << 8) | parts[i + 1]);\r\n        }\r\n      } else if (parts.length === 8) {\r\n        this.parts = parts;\r\n      } else {\r\n        throw new Error(\"ipaddr: ipv6 part count should be 8 or 16\");\r\n      }\r\n      ref = this.parts;\r\n      for (l = 0, len = ref.length; l < len; l++) {\r\n        part = ref[l];\r\n        if (!((0 <= part && part <= 0xffff))) {\r\n          throw new Error(\"ipaddr: ipv6 part should fit in 16 bits\");\r\n        }\r\n      }\r\n      if (zoneId) {\r\n        this.zoneId = zoneId;\r\n      }\r\n    }\r\n\r\n    IPv6.prototype.kind = function() {\r\n      return 'ipv6';\r\n    };\r\n\r\n    IPv6.prototype.toString = function() {\r\n      return this.toNormalizedString().replace(/((^|:)(0(:|$))+)/, '::');\r\n    };\r\n\r\n    IPv6.prototype.toRFC5952String = function() {\r\n      var bestMatchIndex, bestMatchLength, match, regex, string;\r\n      regex = /((^|:)(0(:|$)){2,})/g;\r\n      string = this.toNormalizedString();\r\n      bestMatchIndex = 0;\r\n      bestMatchLength = -1;\r\n      while ((match = regex.exec(string))) {\r\n        if (match[0].length > bestMatchLength) {\r\n          bestMatchIndex = match.index;\r\n          bestMatchLength = match[0].length;\r\n        }\r\n      }\r\n      if (bestMatchLength < 0) {\r\n        return string;\r\n      }\r\n      return string.substring(0, bestMatchIndex) + '::' + string.substring(bestMatchIndex + bestMatchLength);\r\n    };\r\n\r\n    IPv6.prototype.toByteArray = function() {\r\n      var bytes, k, len, part, ref;\r\n      bytes = [];\r\n      ref = this.parts;\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        part = ref[k];\r\n        bytes.push(part >> 8);\r\n        bytes.push(part & 0xff);\r\n      }\r\n      return bytes;\r\n    };\r\n\r\n    IPv6.prototype.toNormalizedString = function() {\r\n      var addr, part, suffix;\r\n      addr = ((function() {\r\n        var k, len, ref, results;\r\n        ref = this.parts;\r\n        results = [];\r\n        for (k = 0, len = ref.length; k < len; k++) {\r\n          part = ref[k];\r\n          results.push(part.toString(16));\r\n        }\r\n        return results;\r\n      }).call(this)).join(\":\");\r\n      suffix = '';\r\n      if (this.zoneId) {\r\n        suffix = '%' + this.zoneId;\r\n      }\r\n      return addr + suffix;\r\n    };\r\n\r\n    IPv6.prototype.toFixedLengthString = function() {\r\n      var addr, part, suffix;\r\n      addr = ((function() {\r\n        var k, len, ref, results;\r\n        ref = this.parts;\r\n        results = [];\r\n        for (k = 0, len = ref.length; k < len; k++) {\r\n          part = ref[k];\r\n          results.push(part.toString(16).padStart(4, '0'));\r\n        }\r\n        return results;\r\n      }).call(this)).join(\":\");\r\n      suffix = '';\r\n      if (this.zoneId) {\r\n        suffix = '%' + this.zoneId;\r\n      }\r\n      return addr + suffix;\r\n    };\r\n\r\n    IPv6.prototype.match = function(other, cidrRange) {\r\n      var ref;\r\n      if (cidrRange === void 0) {\r\n        ref = other, other = ref[0], cidrRange = ref[1];\r\n      }\r\n      if (other.kind() !== 'ipv6') {\r\n        throw new Error(\"ipaddr: cannot match ipv6 address with non-ipv6 one\");\r\n      }\r\n      return matchCIDR(this.parts, other.parts, 16, cidrRange);\r\n    };\r\n\r\n    IPv6.prototype.SpecialRanges = {\r\n      unspecified: [new IPv6([0, 0, 0, 0, 0, 0, 0, 0]), 128],\r\n      linkLocal: [new IPv6([0xfe80, 0, 0, 0, 0, 0, 0, 0]), 10],\r\n      multicast: [new IPv6([0xff00, 0, 0, 0, 0, 0, 0, 0]), 8],\r\n      loopback: [new IPv6([0, 0, 0, 0, 0, 0, 0, 1]), 128],\r\n      uniqueLocal: [new IPv6([0xfc00, 0, 0, 0, 0, 0, 0, 0]), 7],\r\n      ipv4Mapped: [new IPv6([0, 0, 0, 0, 0, 0xffff, 0, 0]), 96],\r\n      rfc6145: [new IPv6([0, 0, 0, 0, 0xffff, 0, 0, 0]), 96],\r\n      rfc6052: [new IPv6([0x64, 0xff9b, 0, 0, 0, 0, 0, 0]), 96],\r\n      '6to4': [new IPv6([0x2002, 0, 0, 0, 0, 0, 0, 0]), 16],\r\n      teredo: [new IPv6([0x2001, 0, 0, 0, 0, 0, 0, 0]), 32],\r\n      reserved: [[new IPv6([0x2001, 0xdb8, 0, 0, 0, 0, 0, 0]), 32]]\r\n    };\r\n\r\n    IPv6.prototype.range = function() {\r\n      return ipaddr.subnetMatch(this, this.SpecialRanges);\r\n    };\r\n\r\n    IPv6.prototype.isIPv4MappedAddress = function() {\r\n      return this.range() === 'ipv4Mapped';\r\n    };\r\n\r\n    IPv6.prototype.toIPv4Address = function() {\r\n      var high, low, ref;\r\n      if (!this.isIPv4MappedAddress()) {\r\n        throw new Error(\"ipaddr: trying to convert a generic ipv6 address to ipv4\");\r\n      }\r\n      ref = this.parts.slice(-2), high = ref[0], low = ref[1];\r\n      return new ipaddr.IPv4([high >> 8, high & 0xff, low >> 8, low & 0xff]);\r\n    };\r\n\r\n    IPv6.prototype.prefixLengthFromSubnetMask = function() {\r\n      var cidr, i, k, part, stop, zeros, zerotable;\r\n      zerotable = {\r\n        0: 16,\r\n        32768: 15,\r\n        49152: 14,\r\n        57344: 13,\r\n        61440: 12,\r\n        63488: 11,\r\n        64512: 10,\r\n        65024: 9,\r\n        65280: 8,\r\n        65408: 7,\r\n        65472: 6,\r\n        65504: 5,\r\n        65520: 4,\r\n        65528: 3,\r\n        65532: 2,\r\n        65534: 1,\r\n        65535: 0\r\n      };\r\n      cidr = 0;\r\n      stop = false;\r\n      for (i = k = 7; k >= 0; i = k += -1) {\r\n        part = this.parts[i];\r\n        if (part in zerotable) {\r\n          zeros = zerotable[part];\r\n          if (stop && zeros !== 0) {\r\n            return null;\r\n          }\r\n          if (zeros !== 16) {\r\n            stop = true;\r\n          }\r\n          cidr += zeros;\r\n        } else {\r\n          return null;\r\n        }\r\n      }\r\n      return 128 - cidr;\r\n    };\r\n\r\n    return IPv6;\r\n\r\n  })();\r\n\r\n  ipv6Part = \"(?:[0-9a-f]+::?)+\";\r\n\r\n  zoneIndex = \"%[0-9a-z]{1,}\";\r\n\r\n  ipv6Regexes = {\r\n    zoneIndex: new RegExp(zoneIndex, 'i'),\r\n    \"native\": new RegExp(\"^(::)?(\" + ipv6Part + \")?([0-9a-f]+)?(::)?(\" + zoneIndex + \")?$\", 'i'),\r\n    transitional: new RegExp((\"^((?:\" + ipv6Part + \")|(?:::)(?:\" + ipv6Part + \")?)\") + (ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part + \"\\\\.\" + ipv4Part) + (\"(\" + zoneIndex + \")?$\"), 'i')\r\n  };\r\n\r\n  expandIPv6 = function(string, parts) {\r\n    var colonCount, lastColon, part, replacement, replacementCount, zoneId;\r\n    if (string.indexOf('::') !== string.lastIndexOf('::')) {\r\n      return null;\r\n    }\r\n    zoneId = (string.match(ipv6Regexes['zoneIndex']) || [])[0];\r\n    if (zoneId) {\r\n      zoneId = zoneId.substring(1);\r\n      string = string.replace(/%.+$/, '');\r\n    }\r\n    colonCount = 0;\r\n    lastColon = -1;\r\n    while ((lastColon = string.indexOf(':', lastColon + 1)) >= 0) {\r\n      colonCount++;\r\n    }\r\n    if (string.substr(0, 2) === '::') {\r\n      colonCount--;\r\n    }\r\n    if (string.substr(-2, 2) === '::') {\r\n      colonCount--;\r\n    }\r\n    if (colonCount > parts) {\r\n      return null;\r\n    }\r\n    replacementCount = parts - colonCount;\r\n    replacement = ':';\r\n    while (replacementCount--) {\r\n      replacement += '0:';\r\n    }\r\n    string = string.replace('::', replacement);\r\n    if (string[0] === ':') {\r\n      string = string.slice(1);\r\n    }\r\n    if (string[string.length - 1] === ':') {\r\n      string = string.slice(0, -1);\r\n    }\r\n    parts = (function() {\r\n      var k, len, ref, results;\r\n      ref = string.split(\":\");\r\n      results = [];\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        part = ref[k];\r\n        results.push(parseInt(part, 16));\r\n      }\r\n      return results;\r\n    })();\r\n    return {\r\n      parts: parts,\r\n      zoneId: zoneId\r\n    };\r\n  };\r\n\r\n  ipaddr.IPv6.parser = function(string) {\r\n    var addr, k, len, match, octet, octets, zoneId;\r\n    if (ipv6Regexes['native'].test(string)) {\r\n      return expandIPv6(string, 8);\r\n    } else if (match = string.match(ipv6Regexes['transitional'])) {\r\n      zoneId = match[6] || '';\r\n      addr = expandIPv6(match[1].slice(0, -1) + zoneId, 6);\r\n      if (addr.parts) {\r\n        octets = [parseInt(match[2]), parseInt(match[3]), parseInt(match[4]), parseInt(match[5])];\r\n        for (k = 0, len = octets.length; k < len; k++) {\r\n          octet = octets[k];\r\n          if (!((0 <= octet && octet <= 255))) {\r\n            return null;\r\n          }\r\n        }\r\n        addr.parts.push(octets[0] << 8 | octets[1]);\r\n        addr.parts.push(octets[2] << 8 | octets[3]);\r\n        return {\r\n          parts: addr.parts,\r\n          zoneId: addr.zoneId\r\n        };\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  ipaddr.IPv4.isIPv4 = ipaddr.IPv6.isIPv6 = function(string) {\r\n    return this.parser(string) !== null;\r\n  };\r\n\r\n  ipaddr.IPv4.isValid = function(string) {\r\n    var e;\r\n    try {\r\n      new this(this.parser(string));\r\n      return true;\r\n    } catch (error1) {\r\n      e = error1;\r\n      return false;\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv4.isValidFourPartDecimal = function(string) {\r\n    if (ipaddr.IPv4.isValid(string) && string.match(/^(0|[1-9]\\d*)(\\.(0|[1-9]\\d*)){3}$/)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv6.isValid = function(string) {\r\n    var addr, e;\r\n    if (typeof string === \"string\" && string.indexOf(\":\") === -1) {\r\n      return false;\r\n    }\r\n    try {\r\n      addr = this.parser(string);\r\n      new this(addr.parts, addr.zoneId);\r\n      return true;\r\n    } catch (error1) {\r\n      e = error1;\r\n      return false;\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv4.parse = function(string) {\r\n    var parts;\r\n    parts = this.parser(string);\r\n    if (parts === null) {\r\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\r\n    }\r\n    return new this(parts);\r\n  };\r\n\r\n  ipaddr.IPv6.parse = function(string) {\r\n    var addr;\r\n    addr = this.parser(string);\r\n    if (addr.parts === null) {\r\n      throw new Error(\"ipaddr: string is not formatted like ip address\");\r\n    }\r\n    return new this(addr.parts, addr.zoneId);\r\n  };\r\n\r\n  ipaddr.IPv4.parseCIDR = function(string) {\r\n    var maskLength, match, parsed;\r\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\r\n      maskLength = parseInt(match[2]);\r\n      if (maskLength >= 0 && maskLength <= 32) {\r\n        parsed = [this.parse(match[1]), maskLength];\r\n        Object.defineProperty(parsed, 'toString', {\r\n          value: function() {\r\n            return this.join('/');\r\n          }\r\n        });\r\n        return parsed;\r\n      }\r\n    }\r\n    throw new Error(\"ipaddr: string is not formatted like an IPv4 CIDR range\");\r\n  };\r\n\r\n  ipaddr.IPv4.subnetMaskFromPrefixLength = function(prefix) {\r\n    var filledOctetCount, j, octets;\r\n    prefix = parseInt(prefix);\r\n    if (prefix < 0 || prefix > 32) {\r\n      throw new Error('ipaddr: invalid IPv4 prefix length');\r\n    }\r\n    octets = [0, 0, 0, 0];\r\n    j = 0;\r\n    filledOctetCount = Math.floor(prefix / 8);\r\n    while (j < filledOctetCount) {\r\n      octets[j] = 255;\r\n      j++;\r\n    }\r\n    if (filledOctetCount < 4) {\r\n      octets[filledOctetCount] = Math.pow(2, prefix % 8) - 1 << 8 - (prefix % 8);\r\n    }\r\n    return new this(octets);\r\n  };\r\n\r\n  ipaddr.IPv4.broadcastAddressFromCIDR = function(string) {\r\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\r\n    try {\r\n      cidr = this.parseCIDR(string);\r\n      ipInterfaceOctets = cidr[0].toByteArray();\r\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\r\n      octets = [];\r\n      i = 0;\r\n      while (i < 4) {\r\n        octets.push(parseInt(ipInterfaceOctets[i], 10) | parseInt(subnetMaskOctets[i], 10) ^ 255);\r\n        i++;\r\n      }\r\n      return new this(octets);\r\n    } catch (error1) {\r\n      error = error1;\r\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv4.networkAddressFromCIDR = function(string) {\r\n    var cidr, error, i, ipInterfaceOctets, octets, subnetMaskOctets;\r\n    try {\r\n      cidr = this.parseCIDR(string);\r\n      ipInterfaceOctets = cidr[0].toByteArray();\r\n      subnetMaskOctets = this.subnetMaskFromPrefixLength(cidr[1]).toByteArray();\r\n      octets = [];\r\n      i = 0;\r\n      while (i < 4) {\r\n        octets.push(parseInt(ipInterfaceOctets[i], 10) & parseInt(subnetMaskOctets[i], 10));\r\n        i++;\r\n      }\r\n      return new this(octets);\r\n    } catch (error1) {\r\n      error = error1;\r\n      throw new Error('ipaddr: the address does not have IPv4 CIDR format');\r\n    }\r\n  };\r\n\r\n  ipaddr.IPv6.parseCIDR = function(string) {\r\n    var maskLength, match, parsed;\r\n    if (match = string.match(/^(.+)\\/(\\d+)$/)) {\r\n      maskLength = parseInt(match[2]);\r\n      if (maskLength >= 0 && maskLength <= 128) {\r\n        parsed = [this.parse(match[1]), maskLength];\r\n        Object.defineProperty(parsed, 'toString', {\r\n          value: function() {\r\n            return this.join('/');\r\n          }\r\n        });\r\n        return parsed;\r\n      }\r\n    }\r\n    throw new Error(\"ipaddr: string is not formatted like an IPv6 CIDR range\");\r\n  };\r\n\r\n  ipaddr.isValid = function(string) {\r\n    return ipaddr.IPv6.isValid(string) || ipaddr.IPv4.isValid(string);\r\n  };\r\n\r\n  ipaddr.parse = function(string) {\r\n    if (ipaddr.IPv6.isValid(string)) {\r\n      return ipaddr.IPv6.parse(string);\r\n    } else if (ipaddr.IPv4.isValid(string)) {\r\n      return ipaddr.IPv4.parse(string);\r\n    } else {\r\n      throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 format\");\r\n    }\r\n  };\r\n\r\n  ipaddr.parseCIDR = function(string) {\r\n    var e;\r\n    try {\r\n      return ipaddr.IPv6.parseCIDR(string);\r\n    } catch (error1) {\r\n      e = error1;\r\n      try {\r\n        return ipaddr.IPv4.parseCIDR(string);\r\n      } catch (error1) {\r\n        e = error1;\r\n        throw new Error(\"ipaddr: the address has neither IPv6 nor IPv4 CIDR format\");\r\n      }\r\n    }\r\n  };\r\n\r\n  ipaddr.fromByteArray = function(bytes) {\r\n    var length;\r\n    length = bytes.length;\r\n    if (length === 4) {\r\n      return new ipaddr.IPv4(bytes);\r\n    } else if (length === 16) {\r\n      return new ipaddr.IPv6(bytes);\r\n    } else {\r\n      throw new Error(\"ipaddr: the binary input is neither an IPv6 nor IPv4 address\");\r\n    }\r\n  };\r\n\r\n  ipaddr.process = function(string) {\r\n    var addr;\r\n    addr = this.parse(string);\r\n    if (addr.kind() === 'ipv6' && addr.isIPv4MappedAddress()) {\r\n      return addr.toIPv4Address();\r\n    } else {\r\n      return addr;\r\n    }\r\n  };\r\n\r\n}).call(this);\r\n"]}