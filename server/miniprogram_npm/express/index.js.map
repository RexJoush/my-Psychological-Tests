{"version":3,"sources":["index.js","lib\\express.js","lib\\application.js","lib\\router\\index.js","lib\\router\\route.js","lib\\router\\layer.js","lib\\middleware\\init.js","lib\\middleware\\query.js","lib\\view.js","lib\\utils.js","lib\\request.js","lib\\response.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,ACHA;AFOA,ADGA,AENA,AENA,ADGA;AFOA,ADGA,AENA,AENA,ADGA;AFOA,ADGA,AENA,AENA,ADGA;AFOA,ADGA,AKfA,AHSA,AENA,ADGA;AFOA,ADGA,AKfA,AHSA,AENA,ADGA;AFOA,ADGA,AKfA,AHSA,AENA,ADGA;AFOA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA;AFOA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA;AFOA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA;AFOA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AIZA;ANmBA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AIZA;ANmBA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AIZA;ANmBA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AJYA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,APqBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,APqBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,APqBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AKfA,ACHA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AMlBA,AGTA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,ADGA,AS3BA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,AENA,ADGA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA,ADGA;ANmBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,ACHA,AKfA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA,AMlBA;APsBA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AQxBA,ACHA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;ADIA,AS3BA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvBA,ARwBA;AQvfile":"index.js","sourcesContent":["/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\nmodule.exports = require('./lib/express');\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar bodyParser = require('body-parser')\r\nvar EventEmitter = require('events').EventEmitter;\r\nvar mixin = require('merge-descriptors');\r\nvar proto = require('./application');\r\nvar Route = require('./router/route');\r\nvar Router = require('./router');\r\nvar req = require('./request');\r\nvar res = require('./response');\r\n\r\n/**\r\n * Expose `createApplication()`.\r\n */\r\n\r\nexports = module.exports = createApplication;\r\n\r\n/**\r\n * Create an express application.\r\n *\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nfunction createApplication() {\r\n  var app = function(req, res, next) {\r\n    app.handle(req, res, next);\r\n  };\r\n\r\n  mixin(app, EventEmitter.prototype, false);\r\n  mixin(app, proto, false);\r\n\r\n  // expose the prototype that will get set on requests\r\n  app.request = Object.create(req, {\r\n    app: { configurable: true, enumerable: true, writable: true, value: app }\r\n  })\r\n\r\n  // expose the prototype that will get set on responses\r\n  app.response = Object.create(res, {\r\n    app: { configurable: true, enumerable: true, writable: true, value: app }\r\n  })\r\n\r\n  app.init();\r\n  return app;\r\n}\r\n\r\n/**\r\n * Expose the prototypes.\r\n */\r\n\r\nexports.application = proto;\r\nexports.request = req;\r\nexports.response = res;\r\n\r\n/**\r\n * Expose constructors.\r\n */\r\n\r\nexports.Route = Route;\r\nexports.Router = Router;\r\n\r\n/**\r\n * Expose middleware\r\n */\r\n\r\nexports.json = bodyParser.json\r\nexports.query = require('./middleware/query');\r\nexports.raw = bodyParser.raw\r\nexports.static = require('serve-static');\r\nexports.text = bodyParser.text\r\nexports.urlencoded = bodyParser.urlencoded\r\n\r\n/**\r\n * Replace removed middleware with an appropriate error message.\r\n */\r\n\r\nvar removedMiddlewares = [\r\n  'bodyParser',\r\n  'compress',\r\n  'cookieSession',\r\n  'session',\r\n  'logger',\r\n  'cookieParser',\r\n  'favicon',\r\n  'responseTime',\r\n  'errorHandler',\r\n  'timeout',\r\n  'methodOverride',\r\n  'vhost',\r\n  'csrf',\r\n  'directory',\r\n  'limit',\r\n  'multipart',\r\n  'staticCache'\r\n]\r\n\r\nremovedMiddlewares.forEach(function (name) {\r\n  Object.defineProperty(exports, name, {\r\n    get: function () {\r\n      throw new Error('Most middleware (like ' + name + ') is no longer bundled with Express and must be installed separately. Please see https://github.com/senchalabs/connect#middleware.');\r\n    },\r\n    configurable: true\r\n  });\r\n});\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar finalhandler = require('finalhandler');\r\nvar Router = require('./router');\r\nvar methods = require('methods');\r\nvar middleware = require('./middleware/init');\r\nvar query = require('./middleware/query');\r\nvar debug = require('debug')('express:application');\r\nvar View = require('./view');\r\nvar http = require('http');\r\nvar compileETag = require('./utils').compileETag;\r\nvar compileQueryParser = require('./utils').compileQueryParser;\r\nvar compileTrust = require('./utils').compileTrust;\r\nvar deprecate = require('depd')('express');\r\nvar flatten = require('array-flatten');\r\nvar merge = require('utils-merge');\r\nvar resolve = require('path').resolve;\r\nvar setPrototypeOf = require('setprototypeof')\r\nvar slice = Array.prototype.slice;\r\n\r\n/**\r\n * Application prototype.\r\n */\r\n\r\nvar app = exports = module.exports = {};\r\n\r\n/**\r\n * Variable for trust proxy inheritance back-compat\r\n * @private\r\n */\r\n\r\nvar trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\r\n\r\n/**\r\n * Initialize the server.\r\n *\r\n *   - setup default configuration\r\n *   - setup default middleware\r\n *   - setup route reflection methods\r\n *\r\n * @private\r\n */\r\n\r\napp.init = function init() {\r\n  this.cache = {};\r\n  this.engines = {};\r\n  this.settings = {};\r\n\r\n  this.defaultConfiguration();\r\n};\r\n\r\n/**\r\n * Initialize application configuration.\r\n * @private\r\n */\r\n\r\napp.defaultConfiguration = function defaultConfiguration() {\r\n  var env = process.env.NODE_ENV || 'development';\r\n\r\n  // default settings\r\n  this.enable('x-powered-by');\r\n  this.set('etag', 'weak');\r\n  this.set('env', env);\r\n  this.set('query parser', 'extended');\r\n  this.set('subdomain offset', 2);\r\n  this.set('trust proxy', false);\r\n\r\n  // trust proxy inherit back-compat\r\n  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\r\n    configurable: true,\r\n    value: true\r\n  });\r\n\r\n  debug('booting in %s mode', env);\r\n\r\n  this.on('mount', function onmount(parent) {\r\n    // inherit trust proxy\r\n    if (this.settings[trustProxyDefaultSymbol] === true\r\n      && typeof parent.settings['trust proxy fn'] === 'function') {\r\n      delete this.settings['trust proxy'];\r\n      delete this.settings['trust proxy fn'];\r\n    }\r\n\r\n    // inherit protos\r\n    setPrototypeOf(this.request, parent.request)\r\n    setPrototypeOf(this.response, parent.response)\r\n    setPrototypeOf(this.engines, parent.engines)\r\n    setPrototypeOf(this.settings, parent.settings)\r\n  });\r\n\r\n  // setup locals\r\n  this.locals = Object.create(null);\r\n\r\n  // top-most app is mounted at /\r\n  this.mountpath = '/';\r\n\r\n  // default locals\r\n  this.locals.settings = this.settings;\r\n\r\n  // default configuration\r\n  this.set('view', View);\r\n  this.set('views', resolve('views'));\r\n  this.set('jsonp callback name', 'callback');\r\n\r\n  if (env === 'production') {\r\n    this.enable('view cache');\r\n  }\r\n\r\n  Object.defineProperty(this, 'router', {\r\n    get: function() {\r\n      throw new Error('\\'app.router\\' is deprecated!\\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * lazily adds the base router if it has not yet been added.\r\n *\r\n * We cannot add the base router in the defaultConfiguration because\r\n * it reads app settings which might be set after that has run.\r\n *\r\n * @private\r\n */\r\napp.lazyrouter = function lazyrouter() {\r\n  if (!this._router) {\r\n    this._router = new Router({\r\n      caseSensitive: this.enabled('case sensitive routing'),\r\n      strict: this.enabled('strict routing')\r\n    });\r\n\r\n    this._router.use(query(this.get('query parser fn')));\r\n    this._router.use(middleware.init(this));\r\n  }\r\n};\r\n\r\n/**\r\n * Dispatch a req, res pair into the application. Starts pipeline processing.\r\n *\r\n * If no callback is provided, then default error handlers will respond\r\n * in the event of an error bubbling through the stack.\r\n *\r\n * @private\r\n */\r\n\r\napp.handle = function handle(req, res, callback) {\r\n  var router = this._router;\r\n\r\n  // final handler\r\n  var done = callback || finalhandler(req, res, {\r\n    env: this.get('env'),\r\n    onerror: logerror.bind(this)\r\n  });\r\n\r\n  // no routes\r\n  if (!router) {\r\n    debug('no routes defined on app');\r\n    done();\r\n    return;\r\n  }\r\n\r\n  router.handle(req, res, done);\r\n};\r\n\r\n/**\r\n * Proxy `Router#use()` to add middleware to the app router.\r\n * See Router#use() documentation for details.\r\n *\r\n * If the _fn_ parameter is an express app, then it will be\r\n * mounted at the _route_ specified.\r\n *\r\n * @public\r\n */\r\n\r\napp.use = function use(fn) {\r\n  var offset = 0;\r\n  var path = '/';\r\n\r\n  // default path to '/'\r\n  // disambiguate app.use([fn])\r\n  if (typeof fn !== 'function') {\r\n    var arg = fn;\r\n\r\n    while (Array.isArray(arg) && arg.length !== 0) {\r\n      arg = arg[0];\r\n    }\r\n\r\n    // first arg is the path\r\n    if (typeof arg !== 'function') {\r\n      offset = 1;\r\n      path = fn;\r\n    }\r\n  }\r\n\r\n  var fns = flatten(slice.call(arguments, offset));\r\n\r\n  if (fns.length === 0) {\r\n    throw new TypeError('app.use() requires a middleware function')\r\n  }\r\n\r\n  // setup router\r\n  this.lazyrouter();\r\n  var router = this._router;\r\n\r\n  fns.forEach(function (fn) {\r\n    // non-express app\r\n    if (!fn || !fn.handle || !fn.set) {\r\n      return router.use(path, fn);\r\n    }\r\n\r\n    debug('.use app under %s', path);\r\n    fn.mountpath = path;\r\n    fn.parent = this;\r\n\r\n    // restore .app property on req and res\r\n    router.use(path, function mounted_app(req, res, next) {\r\n      var orig = req.app;\r\n      fn.handle(req, res, function (err) {\r\n        setPrototypeOf(req, orig.request)\r\n        setPrototypeOf(res, orig.response)\r\n        next(err);\r\n      });\r\n    });\r\n\r\n    // mounted an app\r\n    fn.emit('mount', this);\r\n  }, this);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Proxy to the app `Router#route()`\r\n * Returns a new `Route` instance for the _path_.\r\n *\r\n * Routes are isolated middleware stacks for specific paths.\r\n * See the Route api docs for details.\r\n *\r\n * @public\r\n */\r\n\r\napp.route = function route(path) {\r\n  this.lazyrouter();\r\n  return this._router.route(path);\r\n};\r\n\r\n/**\r\n * Register the given template engine callback `fn`\r\n * as `ext`.\r\n *\r\n * By default will `require()` the engine based on the\r\n * file extension. For example if you try to render\r\n * a \"foo.ejs\" file Express will invoke the following internally:\r\n *\r\n *     app.engine('ejs', require('ejs').__express);\r\n *\r\n * For engines that do not provide `.__express` out of the box,\r\n * or if you wish to \"map\" a different extension to the template engine\r\n * you may use this method. For example mapping the EJS template engine to\r\n * \".html\" files:\r\n *\r\n *     app.engine('html', require('ejs').renderFile);\r\n *\r\n * In this case EJS provides a `.renderFile()` method with\r\n * the same signature that Express expects: `(path, options, callback)`,\r\n * though note that it aliases this method as `ejs.__express` internally\r\n * so if you're using \".ejs\" extensions you dont need to do anything.\r\n *\r\n * Some template engines do not follow this convention, the\r\n * [Consolidate.js](https://github.com/tj/consolidate.js)\r\n * library was created to map all of node's popular template\r\n * engines to follow this convention, thus allowing them to\r\n * work seamlessly within Express.\r\n *\r\n * @param {String} ext\r\n * @param {Function} fn\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\napp.engine = function engine(ext, fn) {\r\n  if (typeof fn !== 'function') {\r\n    throw new Error('callback function required');\r\n  }\r\n\r\n  // get file extension\r\n  var extension = ext[0] !== '.'\r\n    ? '.' + ext\r\n    : ext;\r\n\r\n  // store engine\r\n  this.engines[extension] = fn;\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Proxy to `Router#param()` with one added api feature. The _name_ parameter\r\n * can be an array of names.\r\n *\r\n * See the Router#param() docs for more details.\r\n *\r\n * @param {String|Array} name\r\n * @param {Function} fn\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\napp.param = function param(name, fn) {\r\n  this.lazyrouter();\r\n\r\n  if (Array.isArray(name)) {\r\n    for (var i = 0; i < name.length; i++) {\r\n      this.param(name[i], fn);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  this._router.param(name, fn);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Assign `setting` to `val`, or return `setting`'s value.\r\n *\r\n *    app.set('foo', 'bar');\r\n *    app.set('foo');\r\n *    // => \"bar\"\r\n *\r\n * Mounted servers inherit their parent server's settings.\r\n *\r\n * @param {String} setting\r\n * @param {*} [val]\r\n * @return {Server} for chaining\r\n * @public\r\n */\r\n\r\napp.set = function set(setting, val) {\r\n  if (arguments.length === 1) {\r\n    // app.get(setting)\r\n    return this.settings[setting];\r\n  }\r\n\r\n  debug('set \"%s\" to %o', setting, val);\r\n\r\n  // set value\r\n  this.settings[setting] = val;\r\n\r\n  // trigger matched settings\r\n  switch (setting) {\r\n    case 'etag':\r\n      this.set('etag fn', compileETag(val));\r\n      break;\r\n    case 'query parser':\r\n      this.set('query parser fn', compileQueryParser(val));\r\n      break;\r\n    case 'trust proxy':\r\n      this.set('trust proxy fn', compileTrust(val));\r\n\r\n      // trust proxy inherit back-compat\r\n      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\r\n        configurable: true,\r\n        value: false\r\n      });\r\n\r\n      break;\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return the app's absolute pathname\r\n * based on the parent(s) that have\r\n * mounted it.\r\n *\r\n * For example if the application was\r\n * mounted as \"/admin\", which itself\r\n * was mounted as \"/blog\" then the\r\n * return value would be \"/blog/admin\".\r\n *\r\n * @return {String}\r\n * @private\r\n */\r\n\r\napp.path = function path() {\r\n  return this.parent\r\n    ? this.parent.path() + this.mountpath\r\n    : '';\r\n};\r\n\r\n/**\r\n * Check if `setting` is enabled (truthy).\r\n *\r\n *    app.enabled('foo')\r\n *    // => false\r\n *\r\n *    app.enable('foo')\r\n *    app.enabled('foo')\r\n *    // => true\r\n *\r\n * @param {String} setting\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\napp.enabled = function enabled(setting) {\r\n  return Boolean(this.set(setting));\r\n};\r\n\r\n/**\r\n * Check if `setting` is disabled.\r\n *\r\n *    app.disabled('foo')\r\n *    // => true\r\n *\r\n *    app.enable('foo')\r\n *    app.disabled('foo')\r\n *    // => false\r\n *\r\n * @param {String} setting\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\napp.disabled = function disabled(setting) {\r\n  return !this.set(setting);\r\n};\r\n\r\n/**\r\n * Enable `setting`.\r\n *\r\n * @param {String} setting\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\napp.enable = function enable(setting) {\r\n  return this.set(setting, true);\r\n};\r\n\r\n/**\r\n * Disable `setting`.\r\n *\r\n * @param {String} setting\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\napp.disable = function disable(setting) {\r\n  return this.set(setting, false);\r\n};\r\n\r\n/**\r\n * Delegate `.VERB(...)` calls to `router.VERB(...)`.\r\n */\r\n\r\nmethods.forEach(function(method){\r\n  app[method] = function(path){\r\n    if (method === 'get' && arguments.length === 1) {\r\n      // app.get(setting)\r\n      return this.set(path);\r\n    }\r\n\r\n    this.lazyrouter();\r\n\r\n    var route = this._router.route(path);\r\n    route[method].apply(route, slice.call(arguments, 1));\r\n    return this;\r\n  };\r\n});\r\n\r\n/**\r\n * Special-cased \"all\" method, applying the given route `path`,\r\n * middleware, and callback to _every_ HTTP method.\r\n *\r\n * @param {String} path\r\n * @param {Function} ...\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\napp.all = function all(path) {\r\n  this.lazyrouter();\r\n\r\n  var route = this._router.route(path);\r\n  var args = slice.call(arguments, 1);\r\n\r\n  for (var i = 0; i < methods.length; i++) {\r\n    route[methods[i]].apply(route, args);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n// del -> delete alias\r\n\r\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');\r\n\r\n/**\r\n * Render the given view `name` name with `options`\r\n * and a callback accepting an error and the\r\n * rendered template string.\r\n *\r\n * Example:\r\n *\r\n *    app.render('email', { name: 'Tobi' }, function(err, html){\r\n *      // ...\r\n *    })\r\n *\r\n * @param {String} name\r\n * @param {Object|Function} options or fn\r\n * @param {Function} callback\r\n * @public\r\n */\r\n\r\napp.render = function render(name, options, callback) {\r\n  var cache = this.cache;\r\n  var done = callback;\r\n  var engines = this.engines;\r\n  var opts = options;\r\n  var renderOptions = {};\r\n  var view;\r\n\r\n  // support callback function as second arg\r\n  if (typeof options === 'function') {\r\n    done = options;\r\n    opts = {};\r\n  }\r\n\r\n  // merge app.locals\r\n  merge(renderOptions, this.locals);\r\n\r\n  // merge options._locals\r\n  if (opts._locals) {\r\n    merge(renderOptions, opts._locals);\r\n  }\r\n\r\n  // merge options\r\n  merge(renderOptions, opts);\r\n\r\n  // set .cache unless explicitly provided\r\n  if (renderOptions.cache == null) {\r\n    renderOptions.cache = this.enabled('view cache');\r\n  }\r\n\r\n  // primed cache\r\n  if (renderOptions.cache) {\r\n    view = cache[name];\r\n  }\r\n\r\n  // view\r\n  if (!view) {\r\n    var View = this.get('view');\r\n\r\n    view = new View(name, {\r\n      defaultEngine: this.get('view engine'),\r\n      root: this.get('views'),\r\n      engines: engines\r\n    });\r\n\r\n    if (!view.path) {\r\n      var dirs = Array.isArray(view.root) && view.root.length > 1\r\n        ? 'directories \"' + view.root.slice(0, -1).join('\", \"') + '\" or \"' + view.root[view.root.length - 1] + '\"'\r\n        : 'directory \"' + view.root + '\"'\r\n      var err = new Error('Failed to lookup view \"' + name + '\" in views ' + dirs);\r\n      err.view = view;\r\n      return done(err);\r\n    }\r\n\r\n    // prime the cache\r\n    if (renderOptions.cache) {\r\n      cache[name] = view;\r\n    }\r\n  }\r\n\r\n  // render\r\n  tryRender(view, renderOptions, done);\r\n};\r\n\r\n/**\r\n * Listen for connections.\r\n *\r\n * A node `http.Server` is returned, with this\r\n * application (which is a `Function`) as its\r\n * callback. If you wish to create both an HTTP\r\n * and HTTPS server you may do so with the \"http\"\r\n * and \"https\" modules as shown here:\r\n *\r\n *    var http = require('http')\r\n *      , https = require('https')\r\n *      , express = require('express')\r\n *      , app = express();\r\n *\r\n *    http.createServer(app).listen(80);\r\n *    https.createServer({ ... }, app).listen(443);\r\n *\r\n * @return {http.Server}\r\n * @public\r\n */\r\n\r\napp.listen = function listen() {\r\n  var server = http.createServer(this);\r\n  return server.listen.apply(server, arguments);\r\n};\r\n\r\n/**\r\n * Log error using console.error.\r\n *\r\n * @param {Error} err\r\n * @private\r\n */\r\n\r\nfunction logerror(err) {\r\n  /* istanbul ignore next */\r\n  if (this.get('env') !== 'test') console.error(err.stack || err.toString());\r\n}\r\n\r\n/**\r\n * Try rendering a view.\r\n * @private\r\n */\r\n\r\nfunction tryRender(view, options, callback) {\r\n  try {\r\n    view.render(options, callback);\r\n  } catch (err) {\r\n    callback(err);\r\n  }\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Route = require('./route');\r\nvar Layer = require('./layer');\r\nvar methods = require('methods');\r\nvar mixin = require('utils-merge');\r\nvar debug = require('debug')('express:router');\r\nvar deprecate = require('depd')('express');\r\nvar flatten = require('array-flatten');\r\nvar parseUrl = require('parseurl');\r\nvar setPrototypeOf = require('setprototypeof')\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar objectRegExp = /^\\[object (\\S+)\\]$/;\r\nvar slice = Array.prototype.slice;\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Initialize a new `Router` with the given `options`.\r\n *\r\n * @param {Object} [options]\r\n * @return {Router} which is an callable function\r\n * @public\r\n */\r\n\r\nvar proto = module.exports = function(options) {\r\n  var opts = options || {};\r\n\r\n  function router(req, res, next) {\r\n    router.handle(req, res, next);\r\n  }\r\n\r\n  // mixin Router class functions\r\n  setPrototypeOf(router, proto)\r\n\r\n  router.params = {};\r\n  router._params = [];\r\n  router.caseSensitive = opts.caseSensitive;\r\n  router.mergeParams = opts.mergeParams;\r\n  router.strict = opts.strict;\r\n  router.stack = [];\r\n\r\n  return router;\r\n};\r\n\r\n/**\r\n * Map the given param placeholder `name`(s) to the given callback.\r\n *\r\n * Parameter mapping is used to provide pre-conditions to routes\r\n * which use normalized placeholders. For example a _:user_id_ parameter\r\n * could automatically load a user's information from the database without\r\n * any additional code,\r\n *\r\n * The callback uses the same signature as middleware, the only difference\r\n * being that the value of the placeholder is passed, in this case the _id_\r\n * of the user. Once the `next()` function is invoked, just like middleware\r\n * it will continue on to execute the route, or subsequent parameter functions.\r\n *\r\n * Just like in middleware, you must either respond to the request or call next\r\n * to avoid stalling the request.\r\n *\r\n *  app.param('user_id', function(req, res, next, id){\r\n *    User.find(id, function(err, user){\r\n *      if (err) {\r\n *        return next(err);\r\n *      } else if (!user) {\r\n *        return next(new Error('failed to load user'));\r\n *      }\r\n *      req.user = user;\r\n *      next();\r\n *    });\r\n *  });\r\n *\r\n * @param {String} name\r\n * @param {Function} fn\r\n * @return {app} for chaining\r\n * @public\r\n */\r\n\r\nproto.param = function param(name, fn) {\r\n  // param logic\r\n  if (typeof name === 'function') {\r\n    deprecate('router.param(fn): Refactor to use path params');\r\n    this._params.push(name);\r\n    return;\r\n  }\r\n\r\n  // apply param functions\r\n  var params = this._params;\r\n  var len = params.length;\r\n  var ret;\r\n\r\n  if (name[0] === ':') {\r\n    deprecate('router.param(' + JSON.stringify(name) + ', fn): Use router.param(' + JSON.stringify(name.substr(1)) + ', fn) instead');\r\n    name = name.substr(1);\r\n  }\r\n\r\n  for (var i = 0; i < len; ++i) {\r\n    if (ret = params[i](name, fn)) {\r\n      fn = ret;\r\n    }\r\n  }\r\n\r\n  // ensure we end up with a\r\n  // middleware function\r\n  if ('function' !== typeof fn) {\r\n    throw new Error('invalid param() call for ' + name + ', got ' + fn);\r\n  }\r\n\r\n  (this.params[name] = this.params[name] || []).push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Dispatch a req, res into the router.\r\n * @private\r\n */\r\n\r\nproto.handle = function handle(req, res, out) {\r\n  var self = this;\r\n\r\n  debug('dispatching %s %s', req.method, req.url);\r\n\r\n  var idx = 0;\r\n  var protohost = getProtohost(req.url) || ''\r\n  var removed = '';\r\n  var slashAdded = false;\r\n  var paramcalled = {};\r\n\r\n  // store options for OPTIONS request\r\n  // only used if OPTIONS request\r\n  var options = [];\r\n\r\n  // middleware and routes\r\n  var stack = self.stack;\r\n\r\n  // manage inter-router variables\r\n  var parentParams = req.params;\r\n  var parentUrl = req.baseUrl || '';\r\n  var done = restore(out, req, 'baseUrl', 'next', 'params');\r\n\r\n  // setup next layer\r\n  req.next = next;\r\n\r\n  // for options requests, respond with a default if nothing else responds\r\n  if (req.method === 'OPTIONS') {\r\n    done = wrap(done, function(old, err) {\r\n      if (err || options.length === 0) return old(err);\r\n      sendOptionsResponse(res, options, old);\r\n    });\r\n  }\r\n\r\n  // setup basic req values\r\n  req.baseUrl = parentUrl;\r\n  req.originalUrl = req.originalUrl || req.url;\r\n\r\n  next();\r\n\r\n  function next(err) {\r\n    var layerError = err === 'route'\r\n      ? null\r\n      : err;\r\n\r\n    // remove added slash\r\n    if (slashAdded) {\r\n      req.url = req.url.substr(1);\r\n      slashAdded = false;\r\n    }\r\n\r\n    // restore altered req.url\r\n    if (removed.length !== 0) {\r\n      req.baseUrl = parentUrl;\r\n      req.url = protohost + removed + req.url.substr(protohost.length);\r\n      removed = '';\r\n    }\r\n\r\n    // signal to exit router\r\n    if (layerError === 'router') {\r\n      setImmediate(done, null)\r\n      return\r\n    }\r\n\r\n    // no more matching layers\r\n    if (idx >= stack.length) {\r\n      setImmediate(done, layerError);\r\n      return;\r\n    }\r\n\r\n    // get pathname of request\r\n    var path = getPathname(req);\r\n\r\n    if (path == null) {\r\n      return done(layerError);\r\n    }\r\n\r\n    // find next matching layer\r\n    var layer;\r\n    var match;\r\n    var route;\r\n\r\n    while (match !== true && idx < stack.length) {\r\n      layer = stack[idx++];\r\n      match = matchLayer(layer, path);\r\n      route = layer.route;\r\n\r\n      if (typeof match !== 'boolean') {\r\n        // hold on to layerError\r\n        layerError = layerError || match;\r\n      }\r\n\r\n      if (match !== true) {\r\n        continue;\r\n      }\r\n\r\n      if (!route) {\r\n        // process non-route handlers normally\r\n        continue;\r\n      }\r\n\r\n      if (layerError) {\r\n        // routes do not match with a pending error\r\n        match = false;\r\n        continue;\r\n      }\r\n\r\n      var method = req.method;\r\n      var has_method = route._handles_method(method);\r\n\r\n      // build up automatic options response\r\n      if (!has_method && method === 'OPTIONS') {\r\n        appendMethods(options, route._options());\r\n      }\r\n\r\n      // don't even bother matching route\r\n      if (!has_method && method !== 'HEAD') {\r\n        match = false;\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // no match\r\n    if (match !== true) {\r\n      return done(layerError);\r\n    }\r\n\r\n    // store route for dispatch on change\r\n    if (route) {\r\n      req.route = route;\r\n    }\r\n\r\n    // Capture one-time layer values\r\n    req.params = self.mergeParams\r\n      ? mergeParams(layer.params, parentParams)\r\n      : layer.params;\r\n    var layerPath = layer.path;\r\n\r\n    // this should be done for the layer\r\n    self.process_params(layer, paramcalled, req, res, function (err) {\r\n      if (err) {\r\n        return next(layerError || err);\r\n      }\r\n\r\n      if (route) {\r\n        return layer.handle_request(req, res, next);\r\n      }\r\n\r\n      trim_prefix(layer, layerError, layerPath, path);\r\n    });\r\n  }\r\n\r\n  function trim_prefix(layer, layerError, layerPath, path) {\r\n    if (layerPath.length !== 0) {\r\n      // Validate path breaks on a path separator\r\n      var c = path[layerPath.length]\r\n      if (c && c !== '/' && c !== '.') return next(layerError)\r\n\r\n      // Trim off the part of the url that matches the route\r\n      // middleware (.use stuff) needs to have the path stripped\r\n      debug('trim prefix (%s) from url %s', layerPath, req.url);\r\n      removed = layerPath;\r\n      req.url = protohost + req.url.substr(protohost.length + removed.length);\r\n\r\n      // Ensure leading slash\r\n      if (!protohost && req.url[0] !== '/') {\r\n        req.url = '/' + req.url;\r\n        slashAdded = true;\r\n      }\r\n\r\n      // Setup base URL (no trailing slash)\r\n      req.baseUrl = parentUrl + (removed[removed.length - 1] === '/'\r\n        ? removed.substring(0, removed.length - 1)\r\n        : removed);\r\n    }\r\n\r\n    debug('%s %s : %s', layer.name, layerPath, req.originalUrl);\r\n\r\n    if (layerError) {\r\n      layer.handle_error(layerError, req, res, next);\r\n    } else {\r\n      layer.handle_request(req, res, next);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Process any parameters for the layer.\r\n * @private\r\n */\r\n\r\nproto.process_params = function process_params(layer, called, req, res, done) {\r\n  var params = this.params;\r\n\r\n  // captured parameters from the layer, keys and values\r\n  var keys = layer.keys;\r\n\r\n  // fast track\r\n  if (!keys || keys.length === 0) {\r\n    return done();\r\n  }\r\n\r\n  var i = 0;\r\n  var name;\r\n  var paramIndex = 0;\r\n  var key;\r\n  var paramVal;\r\n  var paramCallbacks;\r\n  var paramCalled;\r\n\r\n  // process params in order\r\n  // param callbacks can be async\r\n  function param(err) {\r\n    if (err) {\r\n      return done(err);\r\n    }\r\n\r\n    if (i >= keys.length ) {\r\n      return done();\r\n    }\r\n\r\n    paramIndex = 0;\r\n    key = keys[i++];\r\n    name = key.name;\r\n    paramVal = req.params[name];\r\n    paramCallbacks = params[name];\r\n    paramCalled = called[name];\r\n\r\n    if (paramVal === undefined || !paramCallbacks) {\r\n      return param();\r\n    }\r\n\r\n    // param previously called with same value or error occurred\r\n    if (paramCalled && (paramCalled.match === paramVal\r\n      || (paramCalled.error && paramCalled.error !== 'route'))) {\r\n      // restore value\r\n      req.params[name] = paramCalled.value;\r\n\r\n      // next param\r\n      return param(paramCalled.error);\r\n    }\r\n\r\n    called[name] = paramCalled = {\r\n      error: null,\r\n      match: paramVal,\r\n      value: paramVal\r\n    };\r\n\r\n    paramCallback();\r\n  }\r\n\r\n  // single param callbacks\r\n  function paramCallback(err) {\r\n    var fn = paramCallbacks[paramIndex++];\r\n\r\n    // store updated value\r\n    paramCalled.value = req.params[key.name];\r\n\r\n    if (err) {\r\n      // store error\r\n      paramCalled.error = err;\r\n      param(err);\r\n      return;\r\n    }\r\n\r\n    if (!fn) return param();\r\n\r\n    try {\r\n      fn(req, res, paramCallback, paramVal, key.name);\r\n    } catch (e) {\r\n      paramCallback(e);\r\n    }\r\n  }\r\n\r\n  param();\r\n};\r\n\r\n/**\r\n * Use the given middleware function, with optional path, defaulting to \"/\".\r\n *\r\n * Use (like `.all`) will run for any http METHOD, but it will not add\r\n * handlers for those methods so OPTIONS requests will not consider `.use`\r\n * functions even if they could respond.\r\n *\r\n * The other difference is that _route_ path is stripped and not visible\r\n * to the handler function. The main effect of this feature is that mounted\r\n * handlers can operate without any code changes regardless of the \"prefix\"\r\n * pathname.\r\n *\r\n * @public\r\n */\r\n\r\nproto.use = function use(fn) {\r\n  var offset = 0;\r\n  var path = '/';\r\n\r\n  // default path to '/'\r\n  // disambiguate router.use([fn])\r\n  if (typeof fn !== 'function') {\r\n    var arg = fn;\r\n\r\n    while (Array.isArray(arg) && arg.length !== 0) {\r\n      arg = arg[0];\r\n    }\r\n\r\n    // first arg is the path\r\n    if (typeof arg !== 'function') {\r\n      offset = 1;\r\n      path = fn;\r\n    }\r\n  }\r\n\r\n  var callbacks = flatten(slice.call(arguments, offset));\r\n\r\n  if (callbacks.length === 0) {\r\n    throw new TypeError('Router.use() requires a middleware function')\r\n  }\r\n\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    var fn = callbacks[i];\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new TypeError('Router.use() requires a middleware function but got a ' + gettype(fn))\r\n    }\r\n\r\n    // add the middleware\r\n    debug('use %o %s', path, fn.name || '<anonymous>')\r\n\r\n    var layer = new Layer(path, {\r\n      sensitive: this.caseSensitive,\r\n      strict: false,\r\n      end: false\r\n    }, fn);\r\n\r\n    layer.route = undefined;\r\n\r\n    this.stack.push(layer);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Create a new Route for the given path.\r\n *\r\n * Each route contains a separate middleware stack and VERB handlers.\r\n *\r\n * See the Route api documentation for details on adding handlers\r\n * and middleware to routes.\r\n *\r\n * @param {String} path\r\n * @return {Route}\r\n * @public\r\n */\r\n\r\nproto.route = function route(path) {\r\n  var route = new Route(path);\r\n\r\n  var layer = new Layer(path, {\r\n    sensitive: this.caseSensitive,\r\n    strict: this.strict,\r\n    end: true\r\n  }, route.dispatch.bind(route));\r\n\r\n  layer.route = route;\r\n\r\n  this.stack.push(layer);\r\n  return route;\r\n};\r\n\r\n// create Router#VERB functions\r\nmethods.concat('all').forEach(function(method){\r\n  proto[method] = function(path){\r\n    var route = this.route(path)\r\n    route[method].apply(route, slice.call(arguments, 1));\r\n    return this;\r\n  };\r\n});\r\n\r\n// append methods to a list of methods\r\nfunction appendMethods(list, addition) {\r\n  for (var i = 0; i < addition.length; i++) {\r\n    var method = addition[i];\r\n    if (list.indexOf(method) === -1) {\r\n      list.push(method);\r\n    }\r\n  }\r\n}\r\n\r\n// get pathname of request\r\nfunction getPathname(req) {\r\n  try {\r\n    return parseUrl(req).pathname;\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n// Get get protocol + host for a URL\r\nfunction getProtohost(url) {\r\n  if (typeof url !== 'string' || url.length === 0 || url[0] === '/') {\r\n    return undefined\r\n  }\r\n\r\n  var searchIndex = url.indexOf('?')\r\n  var pathLength = searchIndex !== -1\r\n    ? searchIndex\r\n    : url.length\r\n  var fqdnIndex = url.substr(0, pathLength).indexOf('://')\r\n\r\n  return fqdnIndex !== -1\r\n    ? url.substr(0, url.indexOf('/', 3 + fqdnIndex))\r\n    : undefined\r\n}\r\n\r\n// get type for error message\r\nfunction gettype(obj) {\r\n  var type = typeof obj;\r\n\r\n  if (type !== 'object') {\r\n    return type;\r\n  }\r\n\r\n  // inspect [[Class]] for objects\r\n  return toString.call(obj)\r\n    .replace(objectRegExp, '$1');\r\n}\r\n\r\n/**\r\n * Match path to a layer.\r\n *\r\n * @param {Layer} layer\r\n * @param {string} path\r\n * @private\r\n */\r\n\r\nfunction matchLayer(layer, path) {\r\n  try {\r\n    return layer.match(path);\r\n  } catch (err) {\r\n    return err;\r\n  }\r\n}\r\n\r\n// merge params with parent params\r\nfunction mergeParams(params, parent) {\r\n  if (typeof parent !== 'object' || !parent) {\r\n    return params;\r\n  }\r\n\r\n  // make copy of parent for base\r\n  var obj = mixin({}, parent);\r\n\r\n  // simple non-numeric merging\r\n  if (!(0 in params) || !(0 in parent)) {\r\n    return mixin(obj, params);\r\n  }\r\n\r\n  var i = 0;\r\n  var o = 0;\r\n\r\n  // determine numeric gaps\r\n  while (i in params) {\r\n    i++;\r\n  }\r\n\r\n  while (o in parent) {\r\n    o++;\r\n  }\r\n\r\n  // offset numeric indices in params before merge\r\n  for (i--; i >= 0; i--) {\r\n    params[i + o] = params[i];\r\n\r\n    // create holes for the merge when necessary\r\n    if (i < o) {\r\n      delete params[i];\r\n    }\r\n  }\r\n\r\n  return mixin(obj, params);\r\n}\r\n\r\n// restore obj props after function\r\nfunction restore(fn, obj) {\r\n  var props = new Array(arguments.length - 2);\r\n  var vals = new Array(arguments.length - 2);\r\n\r\n  for (var i = 0; i < props.length; i++) {\r\n    props[i] = arguments[i + 2];\r\n    vals[i] = obj[props[i]];\r\n  }\r\n\r\n  return function () {\r\n    // restore vals\r\n    for (var i = 0; i < props.length; i++) {\r\n      obj[props[i]] = vals[i];\r\n    }\r\n\r\n    return fn.apply(this, arguments);\r\n  };\r\n}\r\n\r\n// send an OPTIONS response\r\nfunction sendOptionsResponse(res, options, next) {\r\n  try {\r\n    var body = options.join(',');\r\n    res.set('Allow', body);\r\n    res.send(body);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n}\r\n\r\n// wrap a function\r\nfunction wrap(old, fn) {\r\n  return function proxy() {\r\n    var args = new Array(arguments.length + 1);\r\n\r\n    args[0] = old;\r\n    for (var i = 0, len = arguments.length; i < len; i++) {\r\n      args[i + 1] = arguments[i];\r\n    }\r\n\r\n    fn.apply(this, args);\r\n  };\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar debug = require('debug')('express:router:route');\r\nvar flatten = require('array-flatten');\r\nvar Layer = require('./layer');\r\nvar methods = require('methods');\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar slice = Array.prototype.slice;\r\nvar toString = Object.prototype.toString;\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Route;\r\n\r\n/**\r\n * Initialize `Route` with the given `path`,\r\n *\r\n * @param {String} path\r\n * @public\r\n */\r\n\r\nfunction Route(path) {\r\n  this.path = path;\r\n  this.stack = [];\r\n\r\n  debug('new %o', path)\r\n\r\n  // route handlers for various http methods\r\n  this.methods = {};\r\n}\r\n\r\n/**\r\n * Determine if the route handles a given method.\r\n * @private\r\n */\r\n\r\nRoute.prototype._handles_method = function _handles_method(method) {\r\n  if (this.methods._all) {\r\n    return true;\r\n  }\r\n\r\n  var name = method.toLowerCase();\r\n\r\n  if (name === 'head' && !this.methods['head']) {\r\n    name = 'get';\r\n  }\r\n\r\n  return Boolean(this.methods[name]);\r\n};\r\n\r\n/**\r\n * @return {Array} supported HTTP methods\r\n * @private\r\n */\r\n\r\nRoute.prototype._options = function _options() {\r\n  var methods = Object.keys(this.methods);\r\n\r\n  // append automatic head\r\n  if (this.methods.get && !this.methods.head) {\r\n    methods.push('head');\r\n  }\r\n\r\n  for (var i = 0; i < methods.length; i++) {\r\n    // make upper case\r\n    methods[i] = methods[i].toUpperCase();\r\n  }\r\n\r\n  return methods;\r\n};\r\n\r\n/**\r\n * dispatch req, res into this route\r\n * @private\r\n */\r\n\r\nRoute.prototype.dispatch = function dispatch(req, res, done) {\r\n  var idx = 0;\r\n  var stack = this.stack;\r\n  if (stack.length === 0) {\r\n    return done();\r\n  }\r\n\r\n  var method = req.method.toLowerCase();\r\n  if (method === 'head' && !this.methods['head']) {\r\n    method = 'get';\r\n  }\r\n\r\n  req.route = this;\r\n\r\n  next();\r\n\r\n  function next(err) {\r\n    // signal to exit route\r\n    if (err && err === 'route') {\r\n      return done();\r\n    }\r\n\r\n    // signal to exit router\r\n    if (err && err === 'router') {\r\n      return done(err)\r\n    }\r\n\r\n    var layer = stack[idx++];\r\n    if (!layer) {\r\n      return done(err);\r\n    }\r\n\r\n    if (layer.method && layer.method !== method) {\r\n      return next(err);\r\n    }\r\n\r\n    if (err) {\r\n      layer.handle_error(err, req, res, next);\r\n    } else {\r\n      layer.handle_request(req, res, next);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Add a handler for all HTTP verbs to this route.\r\n *\r\n * Behaves just like middleware and can respond or call `next`\r\n * to continue processing.\r\n *\r\n * You can use multiple `.all` call to add multiple handlers.\r\n *\r\n *   function check_something(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   function validate_user(req, res, next){\r\n *     next();\r\n *   };\r\n *\r\n *   route\r\n *   .all(validate_user)\r\n *   .all(check_something)\r\n *   .get(function(req, res, next){\r\n *     res.send('hello world');\r\n *   });\r\n *\r\n * @param {function} handler\r\n * @return {Route} for chaining\r\n * @api public\r\n */\r\n\r\nRoute.prototype.all = function all() {\r\n  var handles = flatten(slice.call(arguments));\r\n\r\n  for (var i = 0; i < handles.length; i++) {\r\n    var handle = handles[i];\r\n\r\n    if (typeof handle !== 'function') {\r\n      var type = toString.call(handle);\r\n      var msg = 'Route.all() requires a callback function but got a ' + type\r\n      throw new TypeError(msg);\r\n    }\r\n\r\n    var layer = Layer('/', {}, handle);\r\n    layer.method = undefined;\r\n\r\n    this.methods._all = true;\r\n    this.stack.push(layer);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\nmethods.forEach(function(method){\r\n  Route.prototype[method] = function(){\r\n    var handles = flatten(slice.call(arguments));\r\n\r\n    for (var i = 0; i < handles.length; i++) {\r\n      var handle = handles[i];\r\n\r\n      if (typeof handle !== 'function') {\r\n        var type = toString.call(handle);\r\n        var msg = 'Route.' + method + '() requires a callback function but got a ' + type\r\n        throw new Error(msg);\r\n      }\r\n\r\n      debug('%s %o', method, this.path)\r\n\r\n      var layer = Layer('/', {}, handle);\r\n      layer.method = method;\r\n\r\n      this.methods[method] = true;\r\n      this.stack.push(layer);\r\n    }\r\n\r\n    return this;\r\n  };\r\n});\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar pathRegexp = require('path-to-regexp');\r\nvar debug = require('debug')('express:router:layer');\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Layer;\r\n\r\nfunction Layer(path, options, fn) {\r\n  if (!(this instanceof Layer)) {\r\n    return new Layer(path, options, fn);\r\n  }\r\n\r\n  debug('new %o', path)\r\n  var opts = options || {};\r\n\r\n  this.handle = fn;\r\n  this.name = fn.name || '<anonymous>';\r\n  this.params = undefined;\r\n  this.path = undefined;\r\n  this.regexp = pathRegexp(path, this.keys = [], opts);\r\n\r\n  // set fast path flags\r\n  this.regexp.fast_star = path === '*'\r\n  this.regexp.fast_slash = path === '/' && opts.end === false\r\n}\r\n\r\n/**\r\n * Handle the error for the layer.\r\n *\r\n * @param {Error} error\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {function} next\r\n * @api private\r\n */\r\n\r\nLayer.prototype.handle_error = function handle_error(error, req, res, next) {\r\n  var fn = this.handle;\r\n\r\n  if (fn.length !== 4) {\r\n    // not a standard error handler\r\n    return next(error);\r\n  }\r\n\r\n  try {\r\n    fn(error, req, res, next);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Handle the request for the layer.\r\n *\r\n * @param {Request} req\r\n * @param {Response} res\r\n * @param {function} next\r\n * @api private\r\n */\r\n\r\nLayer.prototype.handle_request = function handle(req, res, next) {\r\n  var fn = this.handle;\r\n\r\n  if (fn.length > 3) {\r\n    // not a standard request handler\r\n    return next();\r\n  }\r\n\r\n  try {\r\n    fn(req, res, next);\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n\r\n/**\r\n * Check if this route matches `path`, if so\r\n * populate `.params`.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nLayer.prototype.match = function match(path) {\r\n  var match\r\n\r\n  if (path != null) {\r\n    // fast path non-ending match for / (any path matches)\r\n    if (this.regexp.fast_slash) {\r\n      this.params = {}\r\n      this.path = ''\r\n      return true\r\n    }\r\n\r\n    // fast path for * (everything matched in a param)\r\n    if (this.regexp.fast_star) {\r\n      this.params = {'0': decode_param(path)}\r\n      this.path = path\r\n      return true\r\n    }\r\n\r\n    // match the path\r\n    match = this.regexp.exec(path)\r\n  }\r\n\r\n  if (!match) {\r\n    this.params = undefined;\r\n    this.path = undefined;\r\n    return false;\r\n  }\r\n\r\n  // store values\r\n  this.params = {};\r\n  this.path = match[0]\r\n\r\n  var keys = this.keys;\r\n  var params = this.params;\r\n\r\n  for (var i = 1; i < match.length; i++) {\r\n    var key = keys[i - 1];\r\n    var prop = key.name;\r\n    var val = decode_param(match[i])\r\n\r\n    if (val !== undefined || !(hasOwnProperty.call(params, prop))) {\r\n      params[prop] = val;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Decode param value.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction decode_param(val) {\r\n  if (typeof val !== 'string' || val.length === 0) {\r\n    return val;\r\n  }\r\n\r\n  try {\r\n    return decodeURIComponent(val);\r\n  } catch (err) {\r\n    if (err instanceof URIError) {\r\n      err.message = 'Failed to decode param \\'' + val + '\\'';\r\n      err.status = err.statusCode = 400;\r\n    }\r\n\r\n    throw err;\r\n  }\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar setPrototypeOf = require('setprototypeof')\r\n\r\n/**\r\n * Initialization middleware, exposing the\r\n * request and response to each other, as well\r\n * as defaulting the X-Powered-By header field.\r\n *\r\n * @param {Function} app\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.init = function(app){\r\n  return function expressInit(req, res, next){\r\n    if (app.enabled('x-powered-by')) res.setHeader('X-Powered-By', 'Express');\r\n    req.res = res;\r\n    res.req = req;\r\n    req.next = next;\r\n\r\n    setPrototypeOf(req, app.request)\r\n    setPrototypeOf(res, app.response)\r\n\r\n    res.locals = res.locals || Object.create(null);\r\n\r\n    next();\r\n  };\r\n};\r\n\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar merge = require('utils-merge')\r\nvar parseUrl = require('parseurl');\r\nvar qs = require('qs');\r\n\r\n/**\r\n * @param {Object} options\r\n * @return {Function}\r\n * @api public\r\n */\r\n\r\nmodule.exports = function query(options) {\r\n  var opts = merge({}, options)\r\n  var queryparse = qs.parse;\r\n\r\n  if (typeof options === 'function') {\r\n    queryparse = options;\r\n    opts = undefined;\r\n  }\r\n\r\n  if (opts !== undefined && opts.allowPrototypes === undefined) {\r\n    // back-compat for qs module\r\n    opts.allowPrototypes = true;\r\n  }\r\n\r\n  return function query(req, res, next){\r\n    if (!req.query) {\r\n      var val = parseUrl(req).query;\r\n      req.query = queryparse(val, opts);\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar debug = require('debug')('express:view');\r\nvar path = require('path');\r\nvar fs = require('fs');\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar dirname = path.dirname;\r\nvar basename = path.basename;\r\nvar extname = path.extname;\r\nvar join = path.join;\r\nvar resolve = path.resolve;\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = View;\r\n\r\n/**\r\n * Initialize a new `View` with the given `name`.\r\n *\r\n * Options:\r\n *\r\n *   - `defaultEngine` the default template engine name\r\n *   - `engines` template engine require() cache\r\n *   - `root` root path for view lookup\r\n *\r\n * @param {string} name\r\n * @param {object} options\r\n * @public\r\n */\r\n\r\nfunction View(name, options) {\r\n  var opts = options || {};\r\n\r\n  this.defaultEngine = opts.defaultEngine;\r\n  this.ext = extname(name);\r\n  this.name = name;\r\n  this.root = opts.root;\r\n\r\n  if (!this.ext && !this.defaultEngine) {\r\n    throw new Error('No default engine was specified and no extension was provided.');\r\n  }\r\n\r\n  var fileName = name;\r\n\r\n  if (!this.ext) {\r\n    // get extension from default engine name\r\n    this.ext = this.defaultEngine[0] !== '.'\r\n      ? '.' + this.defaultEngine\r\n      : this.defaultEngine;\r\n\r\n    fileName += this.ext;\r\n  }\r\n\r\n  if (!opts.engines[this.ext]) {\r\n    // load engine\r\n    var mod = this.ext.substr(1)\r\n    debug('require \"%s\"', mod)\r\n\r\n    // default engine export\r\n    var fn = require(mod).__express\r\n\r\n    if (typeof fn !== 'function') {\r\n      throw new Error('Module \"' + mod + '\" does not provide a view engine.')\r\n    }\r\n\r\n    opts.engines[this.ext] = fn\r\n  }\r\n\r\n  // store loaded engine\r\n  this.engine = opts.engines[this.ext];\r\n\r\n  // lookup path\r\n  this.path = this.lookup(fileName);\r\n}\r\n\r\n/**\r\n * Lookup view by the given `name`\r\n *\r\n * @param {string} name\r\n * @private\r\n */\r\n\r\nView.prototype.lookup = function lookup(name) {\r\n  var path;\r\n  var roots = [].concat(this.root);\r\n\r\n  debug('lookup \"%s\"', name);\r\n\r\n  for (var i = 0; i < roots.length && !path; i++) {\r\n    var root = roots[i];\r\n\r\n    // resolve the path\r\n    var loc = resolve(root, name);\r\n    var dir = dirname(loc);\r\n    var file = basename(loc);\r\n\r\n    // resolve the file\r\n    path = this.resolve(dir, file);\r\n  }\r\n\r\n  return path;\r\n};\r\n\r\n/**\r\n * Render with the given options.\r\n *\r\n * @param {object} options\r\n * @param {function} callback\r\n * @private\r\n */\r\n\r\nView.prototype.render = function render(options, callback) {\r\n  debug('render \"%s\"', this.path);\r\n  this.engine(this.path, options, callback);\r\n};\r\n\r\n/**\r\n * Resolve the file within the given directory.\r\n *\r\n * @param {string} dir\r\n * @param {string} file\r\n * @private\r\n */\r\n\r\nView.prototype.resolve = function resolve(dir, file) {\r\n  var ext = this.ext;\r\n\r\n  // <path>.<ext>\r\n  var path = join(dir, file);\r\n  var stat = tryStat(path);\r\n\r\n  if (stat && stat.isFile()) {\r\n    return path;\r\n  }\r\n\r\n  // <path>/index.<ext>\r\n  path = join(dir, basename(file, ext), 'index' + ext);\r\n  stat = tryStat(path);\r\n\r\n  if (stat && stat.isFile()) {\r\n    return path;\r\n  }\r\n};\r\n\r\n/**\r\n * Return a stat, maybe.\r\n *\r\n * @param {string} path\r\n * @return {fs.Stats}\r\n * @private\r\n */\r\n\r\nfunction tryStat(path) {\r\n  debug('stat \"%s\"', path);\r\n\r\n  try {\r\n    return fs.statSync(path);\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @api private\r\n */\r\n\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar contentDisposition = require('content-disposition');\r\nvar contentType = require('content-type');\r\nvar deprecate = require('depd')('express');\r\nvar flatten = require('array-flatten');\r\nvar mime = require('send').mime;\r\nvar etag = require('etag');\r\nvar proxyaddr = require('proxy-addr');\r\nvar qs = require('qs');\r\nvar querystring = require('querystring');\r\n\r\n/**\r\n * Return strong ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.etag = createETagGenerator({ weak: false })\r\n\r\n/**\r\n * Return weak ETag for `body`.\r\n *\r\n * @param {String|Buffer} body\r\n * @param {String} [encoding]\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.wetag = createETagGenerator({ weak: true })\r\n\r\n/**\r\n * Check if `path` looks absolute.\r\n *\r\n * @param {String} path\r\n * @return {Boolean}\r\n * @api private\r\n */\r\n\r\nexports.isAbsolute = function(path){\r\n  if ('/' === path[0]) return true;\r\n  if (':' === path[1] && ('\\\\' === path[2] || '/' === path[2])) return true; // Windows device path\r\n  if ('\\\\\\\\' === path.substring(0, 2)) return true; // Microsoft Azure absolute path\r\n};\r\n\r\n/**\r\n * Flatten the given `arr`.\r\n *\r\n * @param {Array} arr\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nexports.flatten = deprecate.function(flatten,\r\n  'utils.flatten: use array-flatten npm module instead');\r\n\r\n/**\r\n * Normalize the given `type`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {String} type\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nexports.normalizeType = function(type){\r\n  return ~type.indexOf('/')\r\n    ? acceptParams(type)\r\n    : { value: mime.lookup(type), params: {} };\r\n};\r\n\r\n/**\r\n * Normalize `types`, for example \"html\" becomes \"text/html\".\r\n *\r\n * @param {Array} types\r\n * @return {Array}\r\n * @api private\r\n */\r\n\r\nexports.normalizeTypes = function(types){\r\n  var ret = [];\r\n\r\n  for (var i = 0; i < types.length; ++i) {\r\n    ret.push(exports.normalizeType(types[i]));\r\n  }\r\n\r\n  return ret;\r\n};\r\n\r\n/**\r\n * Generate Content-Disposition header appropriate for the filename.\r\n * non-ascii filenames are urlencoded and a filename* parameter is added\r\n *\r\n * @param {String} filename\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.contentDisposition = deprecate.function(contentDisposition,\r\n  'utils.contentDisposition: use content-disposition npm module instead');\r\n\r\n/**\r\n * Parse accept params `str` returning an\r\n * object with `.value`, `.quality` and `.params`.\r\n * also includes `.originalIndex` for stable sorting\r\n *\r\n * @param {String} str\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction acceptParams(str, index) {\r\n  var parts = str.split(/ *; */);\r\n  var ret = { value: parts[0], quality: 1, params: {}, originalIndex: index };\r\n\r\n  for (var i = 1; i < parts.length; ++i) {\r\n    var pms = parts[i].split(/ *= */);\r\n    if ('q' === pms[0]) {\r\n      ret.quality = parseFloat(pms[1]);\r\n    } else {\r\n      ret.params[pms[0]] = pms[1];\r\n    }\r\n  }\r\n\r\n  return ret;\r\n}\r\n\r\n/**\r\n * Compile \"etag\" value to function.\r\n *\r\n * @param  {Boolean|String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileETag = function(val) {\r\n  var fn;\r\n\r\n  if (typeof val === 'function') {\r\n    return val;\r\n  }\r\n\r\n  switch (val) {\r\n    case true:\r\n      fn = exports.wetag;\r\n      break;\r\n    case false:\r\n      break;\r\n    case 'strong':\r\n      fn = exports.etag;\r\n      break;\r\n    case 'weak':\r\n      fn = exports.wetag;\r\n      break;\r\n    default:\r\n      throw new TypeError('unknown value for etag function: ' + val);\r\n  }\r\n\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Compile \"query parser\" value to function.\r\n *\r\n * @param  {String|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileQueryParser = function compileQueryParser(val) {\r\n  var fn;\r\n\r\n  if (typeof val === 'function') {\r\n    return val;\r\n  }\r\n\r\n  switch (val) {\r\n    case true:\r\n      fn = querystring.parse;\r\n      break;\r\n    case false:\r\n      fn = newObject;\r\n      break;\r\n    case 'extended':\r\n      fn = parseExtendedQueryString;\r\n      break;\r\n    case 'simple':\r\n      fn = querystring.parse;\r\n      break;\r\n    default:\r\n      throw new TypeError('unknown value for query parser function: ' + val);\r\n  }\r\n\r\n  return fn;\r\n}\r\n\r\n/**\r\n * Compile \"proxy trust\" value to function.\r\n *\r\n * @param  {Boolean|String|Number|Array|Function} val\r\n * @return {Function}\r\n * @api private\r\n */\r\n\r\nexports.compileTrust = function(val) {\r\n  if (typeof val === 'function') return val;\r\n\r\n  if (val === true) {\r\n    // Support plain true/false\r\n    return function(){ return true };\r\n  }\r\n\r\n  if (typeof val === 'number') {\r\n    // Support trusting hop count\r\n    return function(a, i){ return i < val };\r\n  }\r\n\r\n  if (typeof val === 'string') {\r\n    // Support comma-separated values\r\n    val = val.split(/ *, */);\r\n  }\r\n\r\n  return proxyaddr.compile(val || []);\r\n}\r\n\r\n/**\r\n * Set the charset in a given Content-Type string.\r\n *\r\n * @param {String} type\r\n * @param {String} charset\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.setCharset = function setCharset(type, charset) {\r\n  if (!type || !charset) {\r\n    return type;\r\n  }\r\n\r\n  // parse type\r\n  var parsed = contentType.parse(type);\r\n\r\n  // set charset\r\n  parsed.parameters.charset = charset;\r\n\r\n  // format type\r\n  return contentType.format(parsed);\r\n};\r\n\r\n/**\r\n * Create an ETag generator function, generating ETags with\r\n * the given options.\r\n *\r\n * @param {object} options\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction createETagGenerator (options) {\r\n  return function generateETag (body, encoding) {\r\n    var buf = !Buffer.isBuffer(body)\r\n      ? Buffer.from(body, encoding)\r\n      : body\r\n\r\n    return etag(buf, options)\r\n  }\r\n}\r\n\r\n/**\r\n * Parse an extended query string with qs.\r\n *\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction parseExtendedQueryString(str) {\r\n  return qs.parse(str, {\r\n    allowPrototypes: true\r\n  });\r\n}\r\n\r\n/**\r\n * Return new empty object.\r\n *\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction newObject() {\r\n  return {};\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2013 Roman Shtylman\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar accepts = require('accepts');\r\nvar deprecate = require('depd')('express');\r\nvar isIP = require('net').isIP;\r\nvar typeis = require('type-is');\r\nvar http = require('http');\r\nvar fresh = require('fresh');\r\nvar parseRange = require('range-parser');\r\nvar parse = require('parseurl');\r\nvar proxyaddr = require('proxy-addr');\r\n\r\n/**\r\n * Request prototype.\r\n * @public\r\n */\r\n\r\nvar req = Object.create(http.IncomingMessage.prototype)\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = req\r\n\r\n/**\r\n * Return request header.\r\n *\r\n * The `Referrer` header field is special-cased,\r\n * both `Referrer` and `Referer` are interchangeable.\r\n *\r\n * Examples:\r\n *\r\n *     req.get('Content-Type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('content-type');\r\n *     // => \"text/plain\"\r\n *\r\n *     req.get('Something');\r\n *     // => undefined\r\n *\r\n * Aliased as `req.header()`.\r\n *\r\n * @param {String} name\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nreq.get =\r\nreq.header = function header(name) {\r\n  if (!name) {\r\n    throw new TypeError('name argument is required to req.get');\r\n  }\r\n\r\n  if (typeof name !== 'string') {\r\n    throw new TypeError('name must be a string to req.get');\r\n  }\r\n\r\n  var lc = name.toLowerCase();\r\n\r\n  switch (lc) {\r\n    case 'referer':\r\n    case 'referrer':\r\n      return this.headers.referrer\r\n        || this.headers.referer;\r\n    default:\r\n      return this.headers[lc];\r\n  }\r\n};\r\n\r\n/**\r\n * To do: update docs.\r\n *\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single MIME type string\r\n * such as \"application/json\", an extension name\r\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\r\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\r\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given, the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('html');\r\n *     // => \"html\"\r\n *     req.accepts('text/html');\r\n *     // => \"text/html\"\r\n *     req.accepts('json, text');\r\n *     // => \"json\"\r\n *     req.accepts('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     req.accepts('image/png');\r\n *     req.accepts('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     req.accepts(['html', 'json']);\r\n *     req.accepts('html', 'json');\r\n *     req.accepts('html, json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} type(s)\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\r\n\r\nreq.accepts = function(){\r\n  var accept = accepts(this);\r\n  return accept.types.apply(accept, arguments);\r\n};\r\n\r\n/**\r\n * Check if the given `encoding`s are accepted.\r\n *\r\n * @param {String} ...encoding\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsEncodings = function(){\r\n  var accept = accepts(this);\r\n  return accept.encodings.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\r\n  'req.acceptsEncoding: Use acceptsEncodings instead');\r\n\r\n/**\r\n * Check if the given `charset`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...charset\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsCharsets = function(){\r\n  var accept = accepts(this);\r\n  return accept.charsets.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\r\n  'req.acceptsCharset: Use acceptsCharsets instead');\r\n\r\n/**\r\n * Check if the given `lang`s are acceptable,\r\n * otherwise you should respond with 406 \"Not Acceptable\".\r\n *\r\n * @param {String} ...lang\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nreq.acceptsLanguages = function(){\r\n  var accept = accepts(this);\r\n  return accept.languages.apply(accept, arguments);\r\n};\r\n\r\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\r\n  'req.acceptsLanguage: Use acceptsLanguages instead');\r\n\r\n/**\r\n * Parse Range header field, capping to the given `size`.\r\n *\r\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\r\n * the case of a byte range this is of course the total number of bytes. If the\r\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\r\n * and `-2` when syntactically invalid.\r\n *\r\n * When ranges are returned, the array has a \"type\" property which is the type of\r\n * range that is required (most commonly, \"bytes\"). Each array element is an object\r\n * with a \"start\" and \"end\" property for the portion of the range.\r\n *\r\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\r\n * will be combined into a single range.\r\n *\r\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\r\n * should respond with 4 users when available, not 3.\r\n *\r\n * @param {number} size\r\n * @param {object} [options]\r\n * @param {boolean} [options.combine=false]\r\n * @return {number|array}\r\n * @public\r\n */\r\n\r\nreq.range = function range(size, options) {\r\n  var range = this.get('Range');\r\n  if (!range) return;\r\n  return parseRange(size, range, options);\r\n};\r\n\r\n/**\r\n * Return the value of param `name` when present or `defaultValue`.\r\n *\r\n *  - Checks route placeholders, ex: _/user/:id_\r\n *  - Checks body params, ex: id=12, {\"id\":12}\r\n *  - Checks query string params, ex: ?id=12\r\n *\r\n * To utilize request bodies, `req.body`\r\n * should be an object. This can be done by using\r\n * the `bodyParser()` middleware.\r\n *\r\n * @param {String} name\r\n * @param {Mixed} [defaultValue]\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nreq.param = function param(name, defaultValue) {\r\n  var params = this.params || {};\r\n  var body = this.body || {};\r\n  var query = this.query || {};\r\n\r\n  var args = arguments.length === 1\r\n    ? 'name'\r\n    : 'name, default';\r\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\r\n\r\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\r\n  if (null != body[name]) return body[name];\r\n  if (null != query[name]) return query[name];\r\n\r\n  return defaultValue;\r\n};\r\n\r\n/**\r\n * Check if the incoming request contains the \"Content-Type\"\r\n * header field, and it contains the give mime `type`.\r\n *\r\n * Examples:\r\n *\r\n *      // With Content-Type: text/html; charset=utf-8\r\n *      req.is('html');\r\n *      req.is('text/html');\r\n *      req.is('text/*');\r\n *      // => true\r\n *\r\n *      // When Content-Type is application/json\r\n *      req.is('json');\r\n *      req.is('application/json');\r\n *      req.is('application/*');\r\n *      // => true\r\n *\r\n *      req.is('html');\r\n *      // => false\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|false|null}\r\n * @public\r\n */\r\n\r\nreq.is = function is(types) {\r\n  var arr = types;\r\n\r\n  // support flattened arguments\r\n  if (!Array.isArray(types)) {\r\n    arr = new Array(arguments.length);\r\n    for (var i = 0; i < arr.length; i++) {\r\n      arr[i] = arguments[i];\r\n    }\r\n  }\r\n\r\n  return typeis(this, arr);\r\n};\r\n\r\n/**\r\n * Return the protocol string \"http\" or \"https\"\r\n * when requested with TLS. When the \"trust proxy\"\r\n * setting trusts the socket address, the\r\n * \"X-Forwarded-Proto\" header field will be trusted\r\n * and used if present.\r\n *\r\n * If you're running behind a reverse proxy that\r\n * supplies https for you this may be enabled.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'protocol', function protocol(){\r\n  var proto = this.connection.encrypted\r\n    ? 'https'\r\n    : 'http';\r\n  var trust = this.app.get('trust proxy fn');\r\n\r\n  if (!trust(this.connection.remoteAddress, 0)) {\r\n    return proto;\r\n  }\r\n\r\n  // Note: X-Forwarded-Proto is normally only ever a\r\n  //       single value, but this is to be safe.\r\n  var header = this.get('X-Forwarded-Proto') || proto\r\n  var index = header.indexOf(',')\r\n\r\n  return index !== -1\r\n    ? header.substring(0, index).trim()\r\n    : header.trim()\r\n});\r\n\r\n/**\r\n * Short-hand for:\r\n *\r\n *    req.protocol === 'https'\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'secure', function secure(){\r\n  return this.protocol === 'https';\r\n});\r\n\r\n/**\r\n * Return the remote address from the trusted proxy.\r\n *\r\n * The is the remote address on the socket unless\r\n * \"trust proxy\" is set.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'ip', function ip(){\r\n  var trust = this.app.get('trust proxy fn');\r\n  return proxyaddr(this, trust);\r\n});\r\n\r\n/**\r\n * When \"trust proxy\" is set, trusted proxy addresses + client.\r\n *\r\n * For example if the value were \"client, proxy1, proxy2\"\r\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\r\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\r\n * \"proxy2\" were trusted.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'ips', function ips() {\r\n  var trust = this.app.get('trust proxy fn');\r\n  var addrs = proxyaddr.all(this, trust);\r\n\r\n  // reverse the order (to farthest -> closest)\r\n  // and remove socket address\r\n  addrs.reverse().pop()\r\n\r\n  return addrs\r\n});\r\n\r\n/**\r\n * Return subdomains as an array.\r\n *\r\n * Subdomains are the dot-separated parts of the host before the main domain of\r\n * the app. By default, the domain of the app is assumed to be the last two\r\n * parts of the host. This can be changed by setting \"subdomain offset\".\r\n *\r\n * For example, if the domain is \"tobi.ferrets.example.com\":\r\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\r\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\r\n *\r\n * @return {Array}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'subdomains', function subdomains() {\r\n  var hostname = this.hostname;\r\n\r\n  if (!hostname) return [];\r\n\r\n  var offset = this.app.get('subdomain offset');\r\n  var subdomains = !isIP(hostname)\r\n    ? hostname.split('.').reverse()\r\n    : [hostname];\r\n\r\n  return subdomains.slice(offset);\r\n});\r\n\r\n/**\r\n * Short-hand for `url.parse(req.url).pathname`.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'path', function path() {\r\n  return parse(this).pathname;\r\n});\r\n\r\n/**\r\n * Parse the \"Host\" header field to a hostname.\r\n *\r\n * When the \"trust proxy\" setting trusts the socket\r\n * address, the \"X-Forwarded-Host\" header field will\r\n * be trusted.\r\n *\r\n * @return {String}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'hostname', function hostname(){\r\n  var trust = this.app.get('trust proxy fn');\r\n  var host = this.get('X-Forwarded-Host');\r\n\r\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\r\n    host = this.get('Host');\r\n  } else if (host.indexOf(',') !== -1) {\r\n    // Note: X-Forwarded-Host is normally only ever a\r\n    //       single value, but this is to be safe.\r\n    host = host.substring(0, host.indexOf(',')).trimRight()\r\n  }\r\n\r\n  if (!host) return;\r\n\r\n  // IPv6 literal support\r\n  var offset = host[0] === '['\r\n    ? host.indexOf(']') + 1\r\n    : 0;\r\n  var index = host.indexOf(':', offset);\r\n\r\n  return index !== -1\r\n    ? host.substring(0, index)\r\n    : host;\r\n});\r\n\r\n// TODO: change req.host to return host in next major\r\n\r\ndefineGetter(req, 'host', deprecate.function(function host(){\r\n  return this.hostname;\r\n}, 'req.host: Use req.hostname instead'));\r\n\r\n/**\r\n * Check if the request is fresh, aka\r\n * Last-Modified and/or the ETag\r\n * still match.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'fresh', function(){\r\n  var method = this.method;\r\n  var res = this.res\r\n  var status = res.statusCode\r\n\r\n  // GET or HEAD for weak freshness validation only\r\n  if ('GET' !== method && 'HEAD' !== method) return false;\r\n\r\n  // 2xx or 304 as per rfc2616 14.26\r\n  if ((status >= 200 && status < 300) || 304 === status) {\r\n    return fresh(this.headers, {\r\n      'etag': res.get('ETag'),\r\n      'last-modified': res.get('Last-Modified')\r\n    })\r\n  }\r\n\r\n  return false;\r\n});\r\n\r\n/**\r\n * Check if the request is stale, aka\r\n * \"Last-Modified\" and / or the \"ETag\" for the\r\n * resource has changed.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'stale', function stale(){\r\n  return !this.fresh;\r\n});\r\n\r\n/**\r\n * Check if the request was an _XMLHttpRequest_.\r\n *\r\n * @return {Boolean}\r\n * @public\r\n */\r\n\r\ndefineGetter(req, 'xhr', function xhr(){\r\n  var val = this.get('X-Requested-With') || '';\r\n  return val.toLowerCase() === 'xmlhttprequest';\r\n});\r\n\r\n/**\r\n * Helper function for creating a getter on an object.\r\n *\r\n * @param {Object} obj\r\n * @param {String} name\r\n * @param {Function} getter\r\n * @private\r\n */\r\nfunction defineGetter(obj, name, getter) {\r\n  Object.defineProperty(obj, name, {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: getter\r\n  });\r\n}\r\n","/*!\r\n * express\r\n * Copyright(c) 2009-2013 TJ Holowaychuk\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Buffer = require('safe-buffer').Buffer\r\nvar contentDisposition = require('content-disposition');\r\nvar deprecate = require('depd')('express');\r\nvar encodeUrl = require('encodeurl');\r\nvar escapeHtml = require('escape-html');\r\nvar http = require('http');\r\nvar isAbsolute = require('./utils').isAbsolute;\r\nvar onFinished = require('on-finished');\r\nvar path = require('path');\r\nvar statuses = require('statuses')\r\nvar merge = require('utils-merge');\r\nvar sign = require('cookie-signature').sign;\r\nvar normalizeType = require('./utils').normalizeType;\r\nvar normalizeTypes = require('./utils').normalizeTypes;\r\nvar setCharset = require('./utils').setCharset;\r\nvar cookie = require('cookie');\r\nvar send = require('send');\r\nvar extname = path.extname;\r\nvar mime = send.mime;\r\nvar resolve = path.resolve;\r\nvar vary = require('vary');\r\n\r\n/**\r\n * Response prototype.\r\n * @public\r\n */\r\n\r\nvar res = Object.create(http.ServerResponse.prototype)\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = res\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar charsetRegExp = /;\\s*charset\\s*=/;\r\n\r\n/**\r\n * Set status `code`.\r\n *\r\n * @param {Number} code\r\n * @return {ServerResponse}\r\n * @public\r\n */\r\n\r\nres.status = function status(code) {\r\n  this.statusCode = code;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set Link header field with the given `links`.\r\n *\r\n * Examples:\r\n *\r\n *    res.links({\r\n *      next: 'http://api.example.com/users?page=2',\r\n *      last: 'http://api.example.com/users?page=5'\r\n *    });\r\n *\r\n * @param {Object} links\r\n * @return {ServerResponse}\r\n * @public\r\n */\r\n\r\nres.links = function(links){\r\n  var link = this.get('Link') || '';\r\n  if (link) link += ', ';\r\n  return this.set('Link', link + Object.keys(links).map(function(rel){\r\n    return '<' + links[rel] + '>; rel=\"' + rel + '\"';\r\n  }).join(', '));\r\n};\r\n\r\n/**\r\n * Send a response.\r\n *\r\n * Examples:\r\n *\r\n *     res.send(Buffer.from('wahoo'));\r\n *     res.send({ some: 'json' });\r\n *     res.send('<p>some html</p>');\r\n *\r\n * @param {string|number|boolean|object|Buffer} body\r\n * @public\r\n */\r\n\r\nres.send = function send(body) {\r\n  var chunk = body;\r\n  var encoding;\r\n  var req = this.req;\r\n  var type;\r\n\r\n  // settings\r\n  var app = this.app;\r\n\r\n  // allow status / body\r\n  if (arguments.length === 2) {\r\n    // res.send(body, status) backwards compat\r\n    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {\r\n      deprecate('res.send(body, status): Use res.status(status).send(body) instead');\r\n      this.statusCode = arguments[1];\r\n    } else {\r\n      deprecate('res.send(status, body): Use res.status(status).send(body) instead');\r\n      this.statusCode = arguments[0];\r\n      chunk = arguments[1];\r\n    }\r\n  }\r\n\r\n  // disambiguate res.send(status) and res.send(status, num)\r\n  if (typeof chunk === 'number' && arguments.length === 1) {\r\n    // res.send(status) will set status message as text string\r\n    if (!this.get('Content-Type')) {\r\n      this.type('txt');\r\n    }\r\n\r\n    deprecate('res.send(status): Use res.sendStatus(status) instead');\r\n    this.statusCode = chunk;\r\n    chunk = statuses[chunk]\r\n  }\r\n\r\n  switch (typeof chunk) {\r\n    // string defaulting to html\r\n    case 'string':\r\n      if (!this.get('Content-Type')) {\r\n        this.type('html');\r\n      }\r\n      break;\r\n    case 'boolean':\r\n    case 'number':\r\n    case 'object':\r\n      if (chunk === null) {\r\n        chunk = '';\r\n      } else if (Buffer.isBuffer(chunk)) {\r\n        if (!this.get('Content-Type')) {\r\n          this.type('bin');\r\n        }\r\n      } else {\r\n        return this.json(chunk);\r\n      }\r\n      break;\r\n  }\r\n\r\n  // write strings in utf-8\r\n  if (typeof chunk === 'string') {\r\n    encoding = 'utf8';\r\n    type = this.get('Content-Type');\r\n\r\n    // reflect this in content-type\r\n    if (typeof type === 'string') {\r\n      this.set('Content-Type', setCharset(type, 'utf-8'));\r\n    }\r\n  }\r\n\r\n  // determine if ETag should be generated\r\n  var etagFn = app.get('etag fn')\r\n  var generateETag = !this.get('ETag') && typeof etagFn === 'function'\r\n\r\n  // populate Content-Length\r\n  var len\r\n  if (chunk !== undefined) {\r\n    if (Buffer.isBuffer(chunk)) {\r\n      // get length of Buffer\r\n      len = chunk.length\r\n    } else if (!generateETag && chunk.length < 1000) {\r\n      // just calculate length when no ETag + small chunk\r\n      len = Buffer.byteLength(chunk, encoding)\r\n    } else {\r\n      // convert chunk to Buffer and calculate\r\n      chunk = Buffer.from(chunk, encoding)\r\n      encoding = undefined;\r\n      len = chunk.length\r\n    }\r\n\r\n    this.set('Content-Length', len);\r\n  }\r\n\r\n  // populate ETag\r\n  var etag;\r\n  if (generateETag && len !== undefined) {\r\n    if ((etag = etagFn(chunk, encoding))) {\r\n      this.set('ETag', etag);\r\n    }\r\n  }\r\n\r\n  // freshness\r\n  if (req.fresh) this.statusCode = 304;\r\n\r\n  // strip irrelevant headers\r\n  if (204 === this.statusCode || 304 === this.statusCode) {\r\n    this.removeHeader('Content-Type');\r\n    this.removeHeader('Content-Length');\r\n    this.removeHeader('Transfer-Encoding');\r\n    chunk = '';\r\n  }\r\n\r\n  if (req.method === 'HEAD') {\r\n    // skip body for HEAD\r\n    this.end();\r\n  } else {\r\n    // respond\r\n    this.end(chunk, encoding);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Send JSON response.\r\n *\r\n * Examples:\r\n *\r\n *     res.json(null);\r\n *     res.json({ user: 'tj' });\r\n *\r\n * @param {string|number|boolean|object} obj\r\n * @public\r\n */\r\n\r\nres.json = function json(obj) {\r\n  var val = obj;\r\n\r\n  // allow status / body\r\n  if (arguments.length === 2) {\r\n    // res.json(body, status) backwards compat\r\n    if (typeof arguments[1] === 'number') {\r\n      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');\r\n      this.statusCode = arguments[1];\r\n    } else {\r\n      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');\r\n      this.statusCode = arguments[0];\r\n      val = arguments[1];\r\n    }\r\n  }\r\n\r\n  // settings\r\n  var app = this.app;\r\n  var escape = app.get('json escape')\r\n  var replacer = app.get('json replacer');\r\n  var spaces = app.get('json spaces');\r\n  var body = stringify(val, replacer, spaces, escape)\r\n\r\n  // content-type\r\n  if (!this.get('Content-Type')) {\r\n    this.set('Content-Type', 'application/json');\r\n  }\r\n\r\n  return this.send(body);\r\n};\r\n\r\n/**\r\n * Send JSON response with JSONP callback support.\r\n *\r\n * Examples:\r\n *\r\n *     res.jsonp(null);\r\n *     res.jsonp({ user: 'tj' });\r\n *\r\n * @param {string|number|boolean|object} obj\r\n * @public\r\n */\r\n\r\nres.jsonp = function jsonp(obj) {\r\n  var val = obj;\r\n\r\n  // allow status / body\r\n  if (arguments.length === 2) {\r\n    // res.json(body, status) backwards compat\r\n    if (typeof arguments[1] === 'number') {\r\n      deprecate('res.jsonp(obj, status): Use res.status(status).json(obj) instead');\r\n      this.statusCode = arguments[1];\r\n    } else {\r\n      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');\r\n      this.statusCode = arguments[0];\r\n      val = arguments[1];\r\n    }\r\n  }\r\n\r\n  // settings\r\n  var app = this.app;\r\n  var escape = app.get('json escape')\r\n  var replacer = app.get('json replacer');\r\n  var spaces = app.get('json spaces');\r\n  var body = stringify(val, replacer, spaces, escape)\r\n  var callback = this.req.query[app.get('jsonp callback name')];\r\n\r\n  // content-type\r\n  if (!this.get('Content-Type')) {\r\n    this.set('X-Content-Type-Options', 'nosniff');\r\n    this.set('Content-Type', 'application/json');\r\n  }\r\n\r\n  // fixup callback\r\n  if (Array.isArray(callback)) {\r\n    callback = callback[0];\r\n  }\r\n\r\n  // jsonp\r\n  if (typeof callback === 'string' && callback.length !== 0) {\r\n    this.set('X-Content-Type-Options', 'nosniff');\r\n    this.set('Content-Type', 'text/javascript');\r\n\r\n    // restrict callback charset\r\n    callback = callback.replace(/[^\\[\\]\\w$.]/g, '');\r\n\r\n    // replace chars not allowed in JavaScript that are in JSON\r\n    body = body\r\n      .replace(/\\u2028/g, '\\\\u2028')\r\n      .replace(/\\u2029/g, '\\\\u2029');\r\n\r\n    // the /**/ is a specific security mitigation for \"Rosetta Flash JSONP abuse\"\r\n    // the typeof check is just to reduce client error noise\r\n    body = '/**/ typeof ' + callback + ' === \\'function\\' && ' + callback + '(' + body + ');';\r\n  }\r\n\r\n  return this.send(body);\r\n};\r\n\r\n/**\r\n * Send given HTTP status code.\r\n *\r\n * Sets the response status to `statusCode` and the body of the\r\n * response to the standard description from node's http.STATUS_CODES\r\n * or the statusCode number if no description.\r\n *\r\n * Examples:\r\n *\r\n *     res.sendStatus(200);\r\n *\r\n * @param {number} statusCode\r\n * @public\r\n */\r\n\r\nres.sendStatus = function sendStatus(statusCode) {\r\n  var body = statuses[statusCode] || String(statusCode)\r\n\r\n  this.statusCode = statusCode;\r\n  this.type('txt');\r\n\r\n  return this.send(body);\r\n};\r\n\r\n/**\r\n * Transfer the file at the given `path`.\r\n *\r\n * Automatically sets the _Content-Type_ response header field.\r\n * The callback `callback(err)` is invoked when the transfer is complete\r\n * or when an error occurs. Be sure to check `res.sentHeader`\r\n * if you wish to attempt responding, as the header and some data\r\n * may have already been transferred.\r\n *\r\n * Options:\r\n *\r\n *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)\r\n *   - `root`     root directory for relative filenames\r\n *   - `headers`  object of headers to serve with file\r\n *   - `dotfiles` serve dotfiles, defaulting to false; can be `\"allow\"` to send them\r\n *\r\n * Other options are passed along to `send`.\r\n *\r\n * Examples:\r\n *\r\n *  The following example illustrates how `res.sendFile()` may\r\n *  be used as an alternative for the `static()` middleware for\r\n *  dynamic situations. The code backing `res.sendFile()` is actually\r\n *  the same code, so HTTP cache support etc is identical.\r\n *\r\n *     app.get('/user/:uid/photos/:file', function(req, res){\r\n *       var uid = req.params.uid\r\n *         , file = req.params.file;\r\n *\r\n *       req.user.mayViewFilesFrom(uid, function(yes){\r\n *         if (yes) {\r\n *           res.sendFile('/uploads/' + uid + '/' + file);\r\n *         } else {\r\n *           res.send(403, 'Sorry! you cant see that.');\r\n *         }\r\n *       });\r\n *     });\r\n *\r\n * @public\r\n */\r\n\r\nres.sendFile = function sendFile(path, options, callback) {\r\n  var done = callback;\r\n  var req = this.req;\r\n  var res = this;\r\n  var next = req.next;\r\n  var opts = options || {};\r\n\r\n  if (!path) {\r\n    throw new TypeError('path argument is required to res.sendFile');\r\n  }\r\n\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError('path must be a string to res.sendFile')\r\n  }\r\n\r\n  // support function as second arg\r\n  if (typeof options === 'function') {\r\n    done = options;\r\n    opts = {};\r\n  }\r\n\r\n  if (!opts.root && !isAbsolute(path)) {\r\n    throw new TypeError('path must be absolute or specify root to res.sendFile');\r\n  }\r\n\r\n  // create file stream\r\n  var pathname = encodeURI(path);\r\n  var file = send(req, pathname, opts);\r\n\r\n  // transfer\r\n  sendfile(res, file, opts, function (err) {\r\n    if (done) return done(err);\r\n    if (err && err.code === 'EISDIR') return next();\r\n\r\n    // next() all but write errors\r\n    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {\r\n      next(err);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n * Transfer the file at the given `path`.\r\n *\r\n * Automatically sets the _Content-Type_ response header field.\r\n * The callback `callback(err)` is invoked when the transfer is complete\r\n * or when an error occurs. Be sure to check `res.sentHeader`\r\n * if you wish to attempt responding, as the header and some data\r\n * may have already been transferred.\r\n *\r\n * Options:\r\n *\r\n *   - `maxAge`   defaulting to 0 (can be string converted by `ms`)\r\n *   - `root`     root directory for relative filenames\r\n *   - `headers`  object of headers to serve with file\r\n *   - `dotfiles` serve dotfiles, defaulting to false; can be `\"allow\"` to send them\r\n *\r\n * Other options are passed along to `send`.\r\n *\r\n * Examples:\r\n *\r\n *  The following example illustrates how `res.sendfile()` may\r\n *  be used as an alternative for the `static()` middleware for\r\n *  dynamic situations. The code backing `res.sendfile()` is actually\r\n *  the same code, so HTTP cache support etc is identical.\r\n *\r\n *     app.get('/user/:uid/photos/:file', function(req, res){\r\n *       var uid = req.params.uid\r\n *         , file = req.params.file;\r\n *\r\n *       req.user.mayViewFilesFrom(uid, function(yes){\r\n *         if (yes) {\r\n *           res.sendfile('/uploads/' + uid + '/' + file);\r\n *         } else {\r\n *           res.send(403, 'Sorry! you cant see that.');\r\n *         }\r\n *       });\r\n *     });\r\n *\r\n * @public\r\n */\r\n\r\nres.sendfile = function (path, options, callback) {\r\n  var done = callback;\r\n  var req = this.req;\r\n  var res = this;\r\n  var next = req.next;\r\n  var opts = options || {};\r\n\r\n  // support function as second arg\r\n  if (typeof options === 'function') {\r\n    done = options;\r\n    opts = {};\r\n  }\r\n\r\n  // create file stream\r\n  var file = send(req, path, opts);\r\n\r\n  // transfer\r\n  sendfile(res, file, opts, function (err) {\r\n    if (done) return done(err);\r\n    if (err && err.code === 'EISDIR') return next();\r\n\r\n    // next() all but write errors\r\n    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {\r\n      next(err);\r\n    }\r\n  });\r\n};\r\n\r\nres.sendfile = deprecate.function(res.sendfile,\r\n  'res.sendfile: Use res.sendFile instead');\r\n\r\n/**\r\n * Transfer the file at the given `path` as an attachment.\r\n *\r\n * Optionally providing an alternate attachment `filename`,\r\n * and optional callback `callback(err)`. The callback is invoked\r\n * when the data transfer is complete, or when an error has\r\n * ocurred. Be sure to check `res.headersSent` if you plan to respond.\r\n *\r\n * Optionally providing an `options` object to use with `res.sendFile()`.\r\n * This function will set the `Content-Disposition` header, overriding\r\n * any `Content-Disposition` header passed as header options in order\r\n * to set the attachment and filename.\r\n *\r\n * This method uses `res.sendFile()`.\r\n *\r\n * @public\r\n */\r\n\r\nres.download = function download (path, filename, options, callback) {\r\n  var done = callback;\r\n  var name = filename;\r\n  var opts = options || null\r\n\r\n  // support function as second or third arg\r\n  if (typeof filename === 'function') {\r\n    done = filename;\r\n    name = null;\r\n    opts = null\r\n  } else if (typeof options === 'function') {\r\n    done = options\r\n    opts = null\r\n  }\r\n\r\n  // set Content-Disposition when file is sent\r\n  var headers = {\r\n    'Content-Disposition': contentDisposition(name || path)\r\n  };\r\n\r\n  // merge user-provided headers\r\n  if (opts && opts.headers) {\r\n    var keys = Object.keys(opts.headers)\r\n    for (var i = 0; i < keys.length; i++) {\r\n      var key = keys[i]\r\n      if (key.toLowerCase() !== 'content-disposition') {\r\n        headers[key] = opts.headers[key]\r\n      }\r\n    }\r\n  }\r\n\r\n  // merge user-provided options\r\n  opts = Object.create(opts)\r\n  opts.headers = headers\r\n\r\n  // Resolve the full path for sendFile\r\n  var fullPath = resolve(path);\r\n\r\n  // send file\r\n  return this.sendFile(fullPath, opts, done)\r\n};\r\n\r\n/**\r\n * Set _Content-Type_ response header with `type` through `mime.lookup()`\r\n * when it does not contain \"/\", or set the Content-Type to `type` otherwise.\r\n *\r\n * Examples:\r\n *\r\n *     res.type('.html');\r\n *     res.type('html');\r\n *     res.type('json');\r\n *     res.type('application/json');\r\n *     res.type('png');\r\n *\r\n * @param {String} type\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.contentType =\r\nres.type = function contentType(type) {\r\n  var ct = type.indexOf('/') === -1\r\n    ? mime.lookup(type)\r\n    : type;\r\n\r\n  return this.set('Content-Type', ct);\r\n};\r\n\r\n/**\r\n * Respond to the Acceptable formats using an `obj`\r\n * of mime-type callbacks.\r\n *\r\n * This method uses `req.accepted`, an array of\r\n * acceptable types ordered by their quality values.\r\n * When \"Accept\" is not present the _first_ callback\r\n * is invoked, otherwise the first match is used. When\r\n * no match is performed the server responds with\r\n * 406 \"Not Acceptable\".\r\n *\r\n * Content-Type is set for you, however if you choose\r\n * you may alter this within the callback using `res.type()`\r\n * or `res.set('Content-Type', ...)`.\r\n *\r\n *    res.format({\r\n *      'text/plain': function(){\r\n *        res.send('hey');\r\n *      },\r\n *\r\n *      'text/html': function(){\r\n *        res.send('<p>hey</p>');\r\n *      },\r\n *\r\n *      'appliation/json': function(){\r\n *        res.send({ message: 'hey' });\r\n *      }\r\n *    });\r\n *\r\n * In addition to canonicalized MIME types you may\r\n * also use extnames mapped to these types:\r\n *\r\n *    res.format({\r\n *      text: function(){\r\n *        res.send('hey');\r\n *      },\r\n *\r\n *      html: function(){\r\n *        res.send('<p>hey</p>');\r\n *      },\r\n *\r\n *      json: function(){\r\n *        res.send({ message: 'hey' });\r\n *      }\r\n *    });\r\n *\r\n * By default Express passes an `Error`\r\n * with a `.status` of 406 to `next(err)`\r\n * if a match is not made. If you provide\r\n * a `.default` callback it will be invoked\r\n * instead.\r\n *\r\n * @param {Object} obj\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.format = function(obj){\r\n  var req = this.req;\r\n  var next = req.next;\r\n\r\n  var fn = obj.default;\r\n  if (fn) delete obj.default;\r\n  var keys = Object.keys(obj);\r\n\r\n  var key = keys.length > 0\r\n    ? req.accepts(keys)\r\n    : false;\r\n\r\n  this.vary(\"Accept\");\r\n\r\n  if (key) {\r\n    this.set('Content-Type', normalizeType(key).value);\r\n    obj[key](req, this, next);\r\n  } else if (fn) {\r\n    fn();\r\n  } else {\r\n    var err = new Error('Not Acceptable');\r\n    err.status = err.statusCode = 406;\r\n    err.types = normalizeTypes(keys).map(function(o){ return o.value });\r\n    next(err);\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set _Content-Disposition_ header to _attachment_ with optional `filename`.\r\n *\r\n * @param {String} filename\r\n * @return {ServerResponse}\r\n * @public\r\n */\r\n\r\nres.attachment = function attachment(filename) {\r\n  if (filename) {\r\n    this.type(extname(filename));\r\n  }\r\n\r\n  this.set('Content-Disposition', contentDisposition(filename));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Append additional header `field` with value `val`.\r\n *\r\n * Example:\r\n *\r\n *    res.append('Link', ['<http://localhost/>', '<http://localhost:3000/>']);\r\n *    res.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly');\r\n *    res.append('Warning', '199 Miscellaneous warning');\r\n *\r\n * @param {String} field\r\n * @param {String|Array} val\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.append = function append(field, val) {\r\n  var prev = this.get(field);\r\n  var value = val;\r\n\r\n  if (prev) {\r\n    // concat the new and prev vals\r\n    value = Array.isArray(prev) ? prev.concat(val)\r\n      : Array.isArray(val) ? [prev].concat(val)\r\n      : [prev, val];\r\n  }\r\n\r\n  return this.set(field, value);\r\n};\r\n\r\n/**\r\n * Set header `field` to `val`, or pass\r\n * an object of header fields.\r\n *\r\n * Examples:\r\n *\r\n *    res.set('Foo', ['bar', 'baz']);\r\n *    res.set('Accept', 'application/json');\r\n *    res.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' });\r\n *\r\n * Aliased as `res.header()`.\r\n *\r\n * @param {String|Object} field\r\n * @param {String|Array} val\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.set =\r\nres.header = function header(field, val) {\r\n  if (arguments.length === 2) {\r\n    var value = Array.isArray(val)\r\n      ? val.map(String)\r\n      : String(val);\r\n\r\n    // add charset to content-type\r\n    if (field.toLowerCase() === 'content-type') {\r\n      if (Array.isArray(value)) {\r\n        throw new TypeError('Content-Type cannot be set to an Array');\r\n      }\r\n      if (!charsetRegExp.test(value)) {\r\n        var charset = mime.charsets.lookup(value.split(';')[0]);\r\n        if (charset) value += '; charset=' + charset.toLowerCase();\r\n      }\r\n    }\r\n\r\n    this.setHeader(field, value);\r\n  } else {\r\n    for (var key in field) {\r\n      this.set(key, field[key]);\r\n    }\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * Get value for header `field`.\r\n *\r\n * @param {String} field\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nres.get = function(field){\r\n  return this.getHeader(field);\r\n};\r\n\r\n/**\r\n * Clear cookie `name`.\r\n *\r\n * @param {String} name\r\n * @param {Object} [options]\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.clearCookie = function clearCookie(name, options) {\r\n  var opts = merge({ expires: new Date(1), path: '/' }, options);\r\n\r\n  return this.cookie(name, '', opts);\r\n};\r\n\r\n/**\r\n * Set cookie `name` to `value`, with the given `options`.\r\n *\r\n * Options:\r\n *\r\n *    - `maxAge`   max-age in milliseconds, converted to `expires`\r\n *    - `signed`   sign the cookie\r\n *    - `path`     defaults to \"/\"\r\n *\r\n * Examples:\r\n *\r\n *    // \"Remember Me\" for 15 minutes\r\n *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });\r\n *\r\n *    // same as above\r\n *    res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })\r\n *\r\n * @param {String} name\r\n * @param {String|Object} value\r\n * @param {Object} [options]\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.cookie = function (name, value, options) {\r\n  var opts = merge({}, options);\r\n  var secret = this.req.secret;\r\n  var signed = opts.signed;\r\n\r\n  if (signed && !secret) {\r\n    throw new Error('cookieParser(\"secret\") required for signed cookies');\r\n  }\r\n\r\n  var val = typeof value === 'object'\r\n    ? 'j:' + JSON.stringify(value)\r\n    : String(value);\r\n\r\n  if (signed) {\r\n    val = 's:' + sign(val, secret);\r\n  }\r\n\r\n  if ('maxAge' in opts) {\r\n    opts.expires = new Date(Date.now() + opts.maxAge);\r\n    opts.maxAge /= 1000;\r\n  }\r\n\r\n  if (opts.path == null) {\r\n    opts.path = '/';\r\n  }\r\n\r\n  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set the location header to `url`.\r\n *\r\n * The given `url` can also be \"back\", which redirects\r\n * to the _Referrer_ or _Referer_ headers or \"/\".\r\n *\r\n * Examples:\r\n *\r\n *    res.location('/foo/bar').;\r\n *    res.location('http://example.com');\r\n *    res.location('../login');\r\n *\r\n * @param {String} url\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.location = function location(url) {\r\n  var loc = url;\r\n\r\n  // \"back\" is an alias for the referrer\r\n  if (url === 'back') {\r\n    loc = this.req.get('Referrer') || '/';\r\n  }\r\n\r\n  // set location\r\n  return this.set('Location', encodeUrl(loc));\r\n};\r\n\r\n/**\r\n * Redirect to the given `url` with optional response `status`\r\n * defaulting to 302.\r\n *\r\n * The resulting `url` is determined by `res.location()`, so\r\n * it will play nicely with mounted apps, relative paths,\r\n * `\"back\"` etc.\r\n *\r\n * Examples:\r\n *\r\n *    res.redirect('/foo/bar');\r\n *    res.redirect('http://example.com');\r\n *    res.redirect(301, 'http://example.com');\r\n *    res.redirect('../login'); // /blog/post/1 -> /blog/login\r\n *\r\n * @public\r\n */\r\n\r\nres.redirect = function redirect(url) {\r\n  var address = url;\r\n  var body;\r\n  var status = 302;\r\n\r\n  // allow status / url\r\n  if (arguments.length === 2) {\r\n    if (typeof arguments[0] === 'number') {\r\n      status = arguments[0];\r\n      address = arguments[1];\r\n    } else {\r\n      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');\r\n      status = arguments[1];\r\n    }\r\n  }\r\n\r\n  // Set location header\r\n  address = this.location(address).get('Location');\r\n\r\n  // Support text/{plain,html} by default\r\n  this.format({\r\n    text: function(){\r\n      body = statuses[status] + '. Redirecting to ' + address\r\n    },\r\n\r\n    html: function(){\r\n      var u = escapeHtml(address);\r\n      body = '<p>' + statuses[status] + '. Redirecting to <a href=\"' + u + '\">' + u + '</a></p>'\r\n    },\r\n\r\n    default: function(){\r\n      body = '';\r\n    }\r\n  });\r\n\r\n  // Respond\r\n  this.statusCode = status;\r\n  this.set('Content-Length', Buffer.byteLength(body));\r\n\r\n  if (this.req.method === 'HEAD') {\r\n    this.end();\r\n  } else {\r\n    this.end(body);\r\n  }\r\n};\r\n\r\n/**\r\n * Add `field` to Vary. If already present in the Vary set, then\r\n * this call is simply ignored.\r\n *\r\n * @param {Array|String} field\r\n * @return {ServerResponse} for chaining\r\n * @public\r\n */\r\n\r\nres.vary = function(field){\r\n  // checks for back-compat\r\n  if (!field || (Array.isArray(field) && !field.length)) {\r\n    deprecate('res.vary(): Provide a field name');\r\n    return this;\r\n  }\r\n\r\n  vary(this, field);\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Render `view` with the given `options` and optional callback `fn`.\r\n * When a callback function is given a response will _not_ be made\r\n * automatically, otherwise a response of _200_ and _text/html_ is given.\r\n *\r\n * Options:\r\n *\r\n *  - `cache`     boolean hinting to the engine it should cache\r\n *  - `filename`  filename of the view being rendered\r\n *\r\n * @public\r\n */\r\n\r\nres.render = function render(view, options, callback) {\r\n  var app = this.req.app;\r\n  var done = callback;\r\n  var opts = options || {};\r\n  var req = this.req;\r\n  var self = this;\r\n\r\n  // support callback function as second arg\r\n  if (typeof options === 'function') {\r\n    done = options;\r\n    opts = {};\r\n  }\r\n\r\n  // merge res.locals\r\n  opts._locals = self.locals;\r\n\r\n  // default callback to respond\r\n  done = done || function (err, str) {\r\n    if (err) return req.next(err);\r\n    self.send(str);\r\n  };\r\n\r\n  // render\r\n  app.render(view, opts, done);\r\n};\r\n\r\n// pipe the send file stream\r\nfunction sendfile(res, file, options, callback) {\r\n  var done = false;\r\n  var streaming;\r\n\r\n  // request aborted\r\n  function onaborted() {\r\n    if (done) return;\r\n    done = true;\r\n\r\n    var err = new Error('Request aborted');\r\n    err.code = 'ECONNABORTED';\r\n    callback(err);\r\n  }\r\n\r\n  // directory\r\n  function ondirectory() {\r\n    if (done) return;\r\n    done = true;\r\n\r\n    var err = new Error('EISDIR, read');\r\n    err.code = 'EISDIR';\r\n    callback(err);\r\n  }\r\n\r\n  // errors\r\n  function onerror(err) {\r\n    if (done) return;\r\n    done = true;\r\n    callback(err);\r\n  }\r\n\r\n  // ended\r\n  function onend() {\r\n    if (done) return;\r\n    done = true;\r\n    callback();\r\n  }\r\n\r\n  // file\r\n  function onfile() {\r\n    streaming = false;\r\n  }\r\n\r\n  // finished\r\n  function onfinish(err) {\r\n    if (err && err.code === 'ECONNRESET') return onaborted();\r\n    if (err) return onerror(err);\r\n    if (done) return;\r\n\r\n    setImmediate(function () {\r\n      if (streaming !== false && !done) {\r\n        onaborted();\r\n        return;\r\n      }\r\n\r\n      if (done) return;\r\n      done = true;\r\n      callback();\r\n    });\r\n  }\r\n\r\n  // streaming\r\n  function onstream() {\r\n    streaming = true;\r\n  }\r\n\r\n  file.on('directory', ondirectory);\r\n  file.on('end', onend);\r\n  file.on('error', onerror);\r\n  file.on('file', onfile);\r\n  file.on('stream', onstream);\r\n  onFinished(res, onfinish);\r\n\r\n  if (options.headers) {\r\n    // set headers on successful transfer\r\n    file.on('headers', function headers(res) {\r\n      var obj = options.headers;\r\n      var keys = Object.keys(obj);\r\n\r\n      for (var i = 0; i < keys.length; i++) {\r\n        var k = keys[i];\r\n        res.setHeader(k, obj[k]);\r\n      }\r\n    });\r\n  }\r\n\r\n  // pipe\r\n  file.pipe(res);\r\n}\r\n\r\n/**\r\n * Stringify JSON, like JSON.stringify, but v8 optimized, with the\r\n * ability to escape characters that can trigger HTML sniffing.\r\n *\r\n * @param {*} value\r\n * @param {function} replaces\r\n * @param {number} spaces\r\n * @param {boolean} escape\r\n * @returns {string}\r\n * @private\r\n */\r\n\r\nfunction stringify (value, replacer, spaces, escape) {\r\n  // v8 checks arguments.length for optimizing simple call\r\n  // https://bugs.chromium.org/p/v8/issues/detail?id=4730\r\n  var json = replacer || spaces\r\n    ? JSON.stringify(value, replacer, spaces)\r\n    : JSON.stringify(value);\r\n\r\n  if (escape) {\r\n    json = json.replace(/[<>&]/g, function (c) {\r\n      switch (c.charCodeAt(0)) {\r\n        case 0x3c:\r\n          return '\\\\u003c'\r\n        case 0x3e:\r\n          return '\\\\u003e'\r\n        case 0x26:\r\n          return '\\\\u0026'\r\n        /* istanbul ignore next: unreachable default */\r\n        default:\r\n          return c\r\n      }\r\n    })\r\n  }\r\n\r\n  return json\r\n}\r\n"]}