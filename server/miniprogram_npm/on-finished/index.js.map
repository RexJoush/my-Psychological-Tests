{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * on-finished\r\n * Copyright(c) 2013 Jonathan Ong\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = onFinished\r\nmodule.exports.isFinished = isFinished\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar first = require('ee-first')\r\n\r\n/**\r\n * Variables.\r\n * @private\r\n */\r\n\r\n/* istanbul ignore next */\r\nvar defer = typeof setImmediate === 'function'\r\n  ? setImmediate\r\n  : function(fn){ process.nextTick(fn.bind.apply(fn, arguments)) }\r\n\r\n/**\r\n * Invoke callback when the response has finished, useful for\r\n * cleaning up resources afterwards.\r\n *\r\n * @param {object} msg\r\n * @param {function} listener\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction onFinished(msg, listener) {\r\n  if (isFinished(msg) !== false) {\r\n    defer(listener, null, msg)\r\n    return msg\r\n  }\r\n\r\n  // attach the listener to the message\r\n  attachListener(msg, listener)\r\n\r\n  return msg\r\n}\r\n\r\n/**\r\n * Determine if message is already finished.\r\n *\r\n * @param {object} msg\r\n * @return {boolean}\r\n * @public\r\n */\r\n\r\nfunction isFinished(msg) {\r\n  var socket = msg.socket\r\n\r\n  if (typeof msg.finished === 'boolean') {\r\n    // OutgoingMessage\r\n    return Boolean(msg.finished || (socket && !socket.writable))\r\n  }\r\n\r\n  if (typeof msg.complete === 'boolean') {\r\n    // IncomingMessage\r\n    return Boolean(msg.upgrade || !socket || !socket.readable || (msg.complete && !msg.readable))\r\n  }\r\n\r\n  // don't know\r\n  return undefined\r\n}\r\n\r\n/**\r\n * Attach a finished listener to the message.\r\n *\r\n * @param {object} msg\r\n * @param {function} callback\r\n * @private\r\n */\r\n\r\nfunction attachFinishedListener(msg, callback) {\r\n  var eeMsg\r\n  var eeSocket\r\n  var finished = false\r\n\r\n  function onFinish(error) {\r\n    eeMsg.cancel()\r\n    eeSocket.cancel()\r\n\r\n    finished = true\r\n    callback(error)\r\n  }\r\n\r\n  // finished on first message event\r\n  eeMsg = eeSocket = first([[msg, 'end', 'finish']], onFinish)\r\n\r\n  function onSocket(socket) {\r\n    // remove listener\r\n    msg.removeListener('socket', onSocket)\r\n\r\n    if (finished) return\r\n    if (eeMsg !== eeSocket) return\r\n\r\n    // finished on first socket event\r\n    eeSocket = first([[socket, 'error', 'close']], onFinish)\r\n  }\r\n\r\n  if (msg.socket) {\r\n    // socket already assigned\r\n    onSocket(msg.socket)\r\n    return\r\n  }\r\n\r\n  // wait for socket to be assigned\r\n  msg.on('socket', onSocket)\r\n\r\n  if (msg.socket === undefined) {\r\n    // node.js 0.8 patch\r\n    patchAssignSocket(msg, onSocket)\r\n  }\r\n}\r\n\r\n/**\r\n * Attach the listener to the message.\r\n *\r\n * @param {object} msg\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction attachListener(msg, listener) {\r\n  var attached = msg.__onFinished\r\n\r\n  // create a private single listener with queue\r\n  if (!attached || !attached.queue) {\r\n    attached = msg.__onFinished = createListener(msg)\r\n    attachFinishedListener(msg, attached)\r\n  }\r\n\r\n  attached.queue.push(listener)\r\n}\r\n\r\n/**\r\n * Create listener on message.\r\n *\r\n * @param {object} msg\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction createListener(msg) {\r\n  function listener(err) {\r\n    if (msg.__onFinished === listener) msg.__onFinished = null\r\n    if (!listener.queue) return\r\n\r\n    var queue = listener.queue\r\n    listener.queue = null\r\n\r\n    for (var i = 0; i < queue.length; i++) {\r\n      queue[i](err, msg)\r\n    }\r\n  }\r\n\r\n  listener.queue = []\r\n\r\n  return listener\r\n}\r\n\r\n/**\r\n * Patch ServerResponse.prototype.assignSocket for node.js 0.8.\r\n *\r\n * @param {ServerResponse} res\r\n * @param {function} callback\r\n * @private\r\n */\r\n\r\nfunction patchAssignSocket(res, callback) {\r\n  var assignSocket = res.assignSocket\r\n\r\n  if (typeof assignSocket !== 'function') return\r\n\r\n  // res.on('socket', callback) is broken in 0.8\r\n  res.assignSocket = function _assignSocket(socket) {\r\n    assignSocket.call(this, socket)\r\n    callback(socket)\r\n  }\r\n}\r\n"]}