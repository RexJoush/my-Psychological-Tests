{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * bytes\r\n * Copyright(c) 2012-2014 TJ Holowaychuk\r\n * Copyright(c) 2015 Jed Watson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = bytes;\r\nmodule.exports.format = format;\r\nmodule.exports.parse = parse;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n\r\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\r\n\r\nvar map = {\r\n  b:  1,\r\n  kb: 1 << 10,\r\n  mb: 1 << 20,\r\n  gb: 1 << 30,\r\n  tb: Math.pow(1024, 4),\r\n  pb: Math.pow(1024, 5),\r\n};\r\n\r\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\r\n\r\n/**\r\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\r\n *\r\n * @param {string|number} value\r\n * @param {{\r\n *  case: [string],\r\n *  decimalPlaces: [number]\r\n *  fixedDecimals: [boolean]\r\n *  thousandsSeparator: [string]\r\n *  unitSeparator: [string]\r\n *  }} [options] bytes options.\r\n *\r\n * @returns {string|number|null}\r\n */\r\n\r\nfunction bytes(value, options) {\r\n  if (typeof value === 'string') {\r\n    return parse(value);\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    return format(value, options);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n/**\r\n * Format the given value in bytes into a string.\r\n *\r\n * If the value is negative, it is kept as such. If it is a float,\r\n * it is rounded.\r\n *\r\n * @param {number} value\r\n * @param {object} [options]\r\n * @param {number} [options.decimalPlaces=2]\r\n * @param {number} [options.fixedDecimals=false]\r\n * @param {string} [options.thousandsSeparator=]\r\n * @param {string} [options.unit=]\r\n * @param {string} [options.unitSeparator=]\r\n *\r\n * @returns {string|null}\r\n * @public\r\n */\r\n\r\nfunction format(value, options) {\r\n  if (!Number.isFinite(value)) {\r\n    return null;\r\n  }\r\n\r\n  var mag = Math.abs(value);\r\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\r\n  var unitSeparator = (options && options.unitSeparator) || '';\r\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\r\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\r\n  var unit = (options && options.unit) || '';\r\n\r\n  if (!unit || !map[unit.toLowerCase()]) {\r\n    if (mag >= map.pb) {\r\n      unit = 'PB';\r\n    } else if (mag >= map.tb) {\r\n      unit = 'TB';\r\n    } else if (mag >= map.gb) {\r\n      unit = 'GB';\r\n    } else if (mag >= map.mb) {\r\n      unit = 'MB';\r\n    } else if (mag >= map.kb) {\r\n      unit = 'KB';\r\n    } else {\r\n      unit = 'B';\r\n    }\r\n  }\r\n\r\n  var val = value / map[unit.toLowerCase()];\r\n  var str = val.toFixed(decimalPlaces);\r\n\r\n  if (!fixedDecimals) {\r\n    str = str.replace(formatDecimalsRegExp, '$1');\r\n  }\r\n\r\n  if (thousandsSeparator) {\r\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\r\n  }\r\n\r\n  return str + unitSeparator + unit;\r\n}\r\n\r\n/**\r\n * Parse the string value into an integer in bytes.\r\n *\r\n * If no unit is given, it is assumed the value is in bytes.\r\n *\r\n * @param {number|string} val\r\n *\r\n * @returns {number|null}\r\n * @public\r\n */\r\n\r\nfunction parse(val) {\r\n  if (typeof val === 'number' && !isNaN(val)) {\r\n    return val;\r\n  }\r\n\r\n  if (typeof val !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  // Test if the string passed is valid\r\n  var results = parseRegExp.exec(val);\r\n  var floatValue;\r\n  var unit = 'b';\r\n\r\n  if (!results) {\r\n    // Nothing could be extracted from the given string\r\n    floatValue = parseInt(val, 10);\r\n    unit = 'b'\r\n  } else {\r\n    // Retrieve the value and the unit\r\n    floatValue = parseFloat(results[1]);\r\n    unit = results[4].toLowerCase();\r\n  }\r\n\r\n  return Math.floor(map[unit] * floatValue);\r\n}\r\n"]}