{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * content-type\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\r\n *\r\n * parameter     = token \"=\" ( token / quoted-string )\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\r\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\r\n * obs-text      = %x80-FF\r\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n */\r\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\r\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\r\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\r\n *\r\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\r\n * obs-text    = %x80-FF\r\n */\r\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\r\n */\r\nvar QUOTE_REGEXP = /([\\\\\"])/g\r\n\r\n/**\r\n * RegExp to match type in RFC 7231 sec 3.1.1.1\r\n *\r\n * media-type = type \"/\" subtype\r\n * type       = token\r\n * subtype    = token\r\n */\r\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction format (obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var parameters = obj.parameters\r\n  var type = obj.type\r\n\r\n  if (!type || !TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  var string = type\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      if (!TOKEN_REGEXP.test(param)) {\r\n        throw new TypeError('invalid parameter name')\r\n      }\r\n\r\n      string += '; ' + param + '=' + qstring(parameters[param])\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  // support req/res-like objects as argument\r\n  var header = typeof string === 'object'\r\n    ? getcontenttype(string)\r\n    : string\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var index = header.indexOf(';')\r\n  var type = index !== -1\r\n    ? header.substr(0, index).trim()\r\n    : header.trim()\r\n\r\n  if (!TYPE_REGEXP.test(type)) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var obj = new ContentType(type.toLowerCase())\r\n\r\n  // parse parameters\r\n  if (index !== -1) {\r\n    var key\r\n    var match\r\n    var value\r\n\r\n    PARAM_REGEXP.lastIndex = index\r\n\r\n    while ((match = PARAM_REGEXP.exec(header))) {\r\n      if (match.index !== index) {\r\n        throw new TypeError('invalid parameter format')\r\n      }\r\n\r\n      index += match[0].length\r\n      key = match[1].toLowerCase()\r\n      value = match[2]\r\n\r\n      if (value[0] === '\"') {\r\n        // remove quotes and escapes\r\n        value = value\r\n          .substr(1, value.length - 2)\r\n          .replace(QESC_REGEXP, '$1')\r\n      }\r\n\r\n      obj.parameters[key] = value\r\n    }\r\n\r\n    if (index !== header.length) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n  }\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @private\r\n */\r\n\r\nfunction getcontenttype (obj) {\r\n  var header\r\n\r\n  if (typeof obj.getHeader === 'function') {\r\n    // res-like\r\n    header = obj.getHeader('content-type')\r\n  } else if (typeof obj.headers === 'object') {\r\n    // req-like\r\n    header = obj.headers && obj.headers['content-type']\r\n  }\r\n\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('content-type header is missing from object')\r\n  }\r\n\r\n  return header\r\n}\r\n\r\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction qstring (val) {\r\n  var str = String(val)\r\n\r\n  // no need to quote tokens\r\n  if (TOKEN_REGEXP.test(str)) {\r\n    return str\r\n  }\r\n\r\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\r\n    throw new TypeError('invalid parameter value')\r\n  }\r\n\r\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Class to represent a content type.\r\n * @private\r\n */\r\nfunction ContentType (type) {\r\n  this.parameters = Object.create(null)\r\n  this.type = type\r\n}\r\n"]}