{"version":3,"sources":["index.js","lib\\types\\json.js","lib\\read.js","lib\\types\\raw.js","lib\\types\\text.js","lib\\types\\urlencoded.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA;AHUA,AENA,ADGA,AENA,ACHA;AJaA,AENA,ADGA,AENA,ACHA;AJaA,AENA,ADGA,AENA,ACHA;AJaA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AENA,ACHA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AGTA,ACHA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;ALgBA,AENA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AHUA,ADGA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AJaA,AIZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar deprecate = require('depd')('body-parser')\r\n\r\n/**\r\n * Cache of loaded parsers.\r\n * @private\r\n */\r\n\r\nvar parsers = Object.create(null)\r\n\r\n/**\r\n * @typedef Parsers\r\n * @type {function}\r\n * @property {function} json\r\n * @property {function} raw\r\n * @property {function} text\r\n * @property {function} urlencoded\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @type {Parsers}\r\n */\r\n\r\nexports = module.exports = deprecate.function(bodyParser,\r\n  'bodyParser: use individual json/urlencoded middlewares')\r\n\r\n/**\r\n * JSON parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'json', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('json')\r\n})\r\n\r\n/**\r\n * Raw parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'raw', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('raw')\r\n})\r\n\r\n/**\r\n * Text parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'text', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('text')\r\n})\r\n\r\n/**\r\n * URL-encoded parser.\r\n * @public\r\n */\r\n\r\nObject.defineProperty(exports, 'urlencoded', {\r\n  configurable: true,\r\n  enumerable: true,\r\n  get: createParserGetter('urlencoded')\r\n})\r\n\r\n/**\r\n * Create a middleware to parse json and urlencoded bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @deprecated\r\n * @public\r\n */\r\n\r\nfunction bodyParser (options) {\r\n  var opts = {}\r\n\r\n  // exclude type option\r\n  if (options) {\r\n    for (var prop in options) {\r\n      if (prop !== 'type') {\r\n        opts[prop] = options[prop]\r\n      }\r\n    }\r\n  }\r\n\r\n  var _urlencoded = exports.urlencoded(opts)\r\n  var _json = exports.json(opts)\r\n\r\n  return function bodyParser (req, res, next) {\r\n    _json(req, res, function (err) {\r\n      if (err) return next(err)\r\n      _urlencoded(req, res, next)\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Create a getter for loading a parser.\r\n * @private\r\n */\r\n\r\nfunction createParserGetter (name) {\r\n  return function get () {\r\n    return loadParser(name)\r\n  }\r\n}\r\n\r\n/**\r\n * Load a parser module.\r\n * @private\r\n */\r\n\r\nfunction loadParser (parserName) {\r\n  var parser = parsers[parserName]\r\n\r\n  if (parser !== undefined) {\r\n    return parser\r\n  }\r\n\r\n  // this uses a switch for static require analysis\r\n  switch (parserName) {\r\n    case 'json':\r\n      parser = require('./lib/types/json')\r\n      break\r\n    case 'raw':\r\n      parser = require('./lib/types/raw')\r\n      break\r\n    case 'text':\r\n      parser = require('./lib/types/text')\r\n      break\r\n    case 'urlencoded':\r\n      parser = require('./lib/types/urlencoded')\r\n      break\r\n  }\r\n\r\n  // store to prevent invoking require()\r\n  return (parsers[parserName] = parser)\r\n}\r\n","/*!\r\n * body-parser\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar contentType = require('content-type')\r\nvar createError = require('http-errors')\r\nvar debug = require('debug')('body-parser:json')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = json\r\n\r\n/**\r\n * RegExp to match the first non-space in a string.\r\n *\r\n * Allowed whitespace is defined in RFC 7159:\r\n *\r\n *    ws = *(\r\n *            %x20 /              ; Space\r\n *            %x09 /              ; Horizontal tab\r\n *            %x0A /              ; Line feed or New line\r\n *            %x0D )              ; Carriage return\r\n */\r\n\r\nvar FIRST_CHAR_REGEXP = /^[\\x20\\x09\\x0a\\x0d]*(.)/ // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * Create a middleware to parse JSON bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @public\r\n */\r\n\r\nfunction json (options) {\r\n  var opts = options || {}\r\n\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var inflate = opts.inflate !== false\r\n  var reviver = opts.reviver\r\n  var strict = opts.strict !== false\r\n  var type = opts.type || 'application/json'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (body) {\r\n    if (body.length === 0) {\r\n      // special-case empty json body, as it's a common client-side mistake\r\n      // TODO: maybe make this configurable or part of \"strict\" option\r\n      return {}\r\n    }\r\n\r\n    if (strict) {\r\n      var first = firstchar(body)\r\n\r\n      if (first !== '{' && first !== '[') {\r\n        debug('strict violation')\r\n        throw createStrictSyntaxError(body, first)\r\n      }\r\n    }\r\n\r\n    try {\r\n      debug('parse json')\r\n      return JSON.parse(body, reviver)\r\n    } catch (e) {\r\n      throw normalizeJsonSyntaxError(e, {\r\n        message: e.message,\r\n        stack: e.stack\r\n      })\r\n    }\r\n  }\r\n\r\n  return function jsonParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // assert charset per RFC 7159 sec 8.1\r\n    var charset = getCharset(req) || 'utf-8'\r\n    if (charset.substr(0, 4) !== 'utf-') {\r\n      debug('invalid charset')\r\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\r\n        charset: charset,\r\n        type: 'charset.unsupported'\r\n      }))\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      encoding: charset,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Create strict violation syntax error matching native error.\r\n *\r\n * @param {string} str\r\n * @param {string} char\r\n * @return {Error}\r\n * @private\r\n */\r\n\r\nfunction createStrictSyntaxError (str, char) {\r\n  var index = str.indexOf(char)\r\n  var partial = str.substring(0, index) + '#'\r\n\r\n  try {\r\n    JSON.parse(partial); /* istanbul ignore next */ throw new SyntaxError('strict violation')\r\n  } catch (e) {\r\n    return normalizeJsonSyntaxError(e, {\r\n      message: e.message.replace('#', char),\r\n      stack: e.stack\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the first non-whitespace character in a string.\r\n *\r\n * @param {string} str\r\n * @return {function}\r\n * @private\r\n */\r\n\r\nfunction firstchar (str) {\r\n  return FIRST_CHAR_REGEXP.exec(str)[1]\r\n}\r\n\r\n/**\r\n * Get the charset of a request.\r\n *\r\n * @param {object} req\r\n * @api private\r\n */\r\n\r\nfunction getCharset (req) {\r\n  try {\r\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Normalize a SyntaxError for JSON.parse.\r\n *\r\n * @param {SyntaxError} error\r\n * @param {object} obj\r\n * @return {SyntaxError}\r\n */\r\n\r\nfunction normalizeJsonSyntaxError (error, obj) {\r\n  var keys = Object.getOwnPropertyNames(error)\r\n\r\n  for (var i = 0; i < keys.length; i++) {\r\n    var key = keys[i]\r\n    if (key !== 'stack' && key !== 'message') {\r\n      delete error[key]\r\n    }\r\n  }\r\n\r\n  // replace stack before message for Node.js 0.10 and below\r\n  error.stack = obj.stack.replace(error.message, obj.message)\r\n  error.message = obj.message\r\n\r\n  return error\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n","/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar createError = require('http-errors')\r\nvar getBody = require('raw-body')\r\nvar iconv = require('iconv-lite')\r\nvar onFinished = require('on-finished')\r\nvar zlib = require('zlib')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = read\r\n\r\n/**\r\n * Read a request into a buffer and parse.\r\n *\r\n * @param {object} req\r\n * @param {object} res\r\n * @param {function} next\r\n * @param {function} parse\r\n * @param {function} debug\r\n * @param {object} options\r\n * @private\r\n */\r\n\r\nfunction read (req, res, next, parse, debug, options) {\r\n  var length\r\n  var opts = options\r\n  var stream\r\n\r\n  // flag as parsed\r\n  req._body = true\r\n\r\n  // read options\r\n  var encoding = opts.encoding !== null\r\n    ? opts.encoding\r\n    : null\r\n  var verify = opts.verify\r\n\r\n  try {\r\n    // get the content stream\r\n    stream = contentstream(req, debug, opts.inflate)\r\n    length = stream.length\r\n    stream.length = undefined\r\n  } catch (err) {\r\n    return next(err)\r\n  }\r\n\r\n  // set raw-body options\r\n  opts.length = length\r\n  opts.encoding = verify\r\n    ? null\r\n    : encoding\r\n\r\n  // assert charset is supported\r\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\r\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n      charset: encoding.toLowerCase(),\r\n      type: 'charset.unsupported'\r\n    }))\r\n  }\r\n\r\n  // read body\r\n  debug('read body')\r\n  getBody(stream, opts, function (error, body) {\r\n    if (error) {\r\n      var _error\r\n\r\n      if (error.type === 'encoding.unsupported') {\r\n        // echo back charset\r\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\r\n          charset: encoding.toLowerCase(),\r\n          type: 'charset.unsupported'\r\n        })\r\n      } else {\r\n        // set status code on error\r\n        _error = createError(400, error)\r\n      }\r\n\r\n      // read off entire request\r\n      stream.resume()\r\n      onFinished(req, function onfinished () {\r\n        next(createError(400, _error))\r\n      })\r\n      return\r\n    }\r\n\r\n    // verify\r\n    if (verify) {\r\n      try {\r\n        debug('verify body')\r\n        verify(req, res, body, encoding)\r\n      } catch (err) {\r\n        next(createError(403, err, {\r\n          body: body,\r\n          type: err.type || 'entity.verify.failed'\r\n        }))\r\n        return\r\n      }\r\n    }\r\n\r\n    // parse\r\n    var str = body\r\n    try {\r\n      debug('parse body')\r\n      str = typeof body !== 'string' && encoding !== null\r\n        ? iconv.decode(body, encoding)\r\n        : body\r\n      req.body = parse(str)\r\n    } catch (err) {\r\n      next(createError(400, err, {\r\n        body: str,\r\n        type: err.type || 'entity.parse.failed'\r\n      }))\r\n      return\r\n    }\r\n\r\n    next()\r\n  })\r\n}\r\n\r\n/**\r\n * Get the content stream of the request.\r\n *\r\n * @param {object} req\r\n * @param {function} debug\r\n * @param {boolean} [inflate=true]\r\n * @return {object}\r\n * @api private\r\n */\r\n\r\nfunction contentstream (req, debug, inflate) {\r\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\r\n  var length = req.headers['content-length']\r\n  var stream\r\n\r\n  debug('content-encoding \"%s\"', encoding)\r\n\r\n  if (inflate === false && encoding !== 'identity') {\r\n    throw createError(415, 'content encoding unsupported', {\r\n      encoding: encoding,\r\n      type: 'encoding.unsupported'\r\n    })\r\n  }\r\n\r\n  switch (encoding) {\r\n    case 'deflate':\r\n      stream = zlib.createInflate()\r\n      debug('inflate body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'gzip':\r\n      stream = zlib.createGunzip()\r\n      debug('gunzip body')\r\n      req.pipe(stream)\r\n      break\r\n    case 'identity':\r\n      stream = req\r\n      stream.length = length\r\n      break\r\n    default:\r\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\r\n        encoding: encoding,\r\n        type: 'encoding.unsupported'\r\n      })\r\n  }\r\n\r\n  return stream\r\n}\r\n","/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar debug = require('debug')('body-parser:raw')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = raw\r\n\r\n/**\r\n * Create a middleware to parse raw bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @api public\r\n */\r\n\r\nfunction raw (options) {\r\n  var opts = options || {}\r\n\r\n  var inflate = opts.inflate !== false\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var type = opts.type || 'application/octet-stream'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (buf) {\r\n    return buf\r\n  }\r\n\r\n  return function rawParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      encoding: null,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n","/*!\r\n * body-parser\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar contentType = require('content-type')\r\nvar debug = require('debug')('body-parser:text')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = text\r\n\r\n/**\r\n * Create a middleware to parse text bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @api public\r\n */\r\n\r\nfunction text (options) {\r\n  var opts = options || {}\r\n\r\n  var defaultCharset = opts.defaultCharset || 'utf-8'\r\n  var inflate = opts.inflate !== false\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var type = opts.type || 'text/plain'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (buf) {\r\n    return buf\r\n  }\r\n\r\n  return function textParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // get charset\r\n    var charset = getCharset(req) || defaultCharset\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      encoding: charset,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the charset of a request.\r\n *\r\n * @param {object} req\r\n * @api private\r\n */\r\n\r\nfunction getCharset (req) {\r\n  try {\r\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n","/*!\r\n * body-parser\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar bytes = require('bytes')\r\nvar contentType = require('content-type')\r\nvar createError = require('http-errors')\r\nvar debug = require('debug')('body-parser:urlencoded')\r\nvar deprecate = require('depd')('body-parser')\r\nvar read = require('../read')\r\nvar typeis = require('type-is')\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = urlencoded\r\n\r\n/**\r\n * Cache of parser modules.\r\n */\r\n\r\nvar parsers = Object.create(null)\r\n\r\n/**\r\n * Create a middleware to parse urlencoded bodies.\r\n *\r\n * @param {object} [options]\r\n * @return {function}\r\n * @public\r\n */\r\n\r\nfunction urlencoded (options) {\r\n  var opts = options || {}\r\n\r\n  // notice because option default will flip in next major\r\n  if (opts.extended === undefined) {\r\n    deprecate('undefined extended: provide extended option')\r\n  }\r\n\r\n  var extended = opts.extended !== false\r\n  var inflate = opts.inflate !== false\r\n  var limit = typeof opts.limit !== 'number'\r\n    ? bytes.parse(opts.limit || '100kb')\r\n    : opts.limit\r\n  var type = opts.type || 'application/x-www-form-urlencoded'\r\n  var verify = opts.verify || false\r\n\r\n  if (verify !== false && typeof verify !== 'function') {\r\n    throw new TypeError('option verify must be function')\r\n  }\r\n\r\n  // create the appropriate query parser\r\n  var queryparse = extended\r\n    ? extendedparser(opts)\r\n    : simpleparser(opts)\r\n\r\n  // create the appropriate type checking function\r\n  var shouldParse = typeof type !== 'function'\r\n    ? typeChecker(type)\r\n    : type\r\n\r\n  function parse (body) {\r\n    return body.length\r\n      ? queryparse(body)\r\n      : {}\r\n  }\r\n\r\n  return function urlencodedParser (req, res, next) {\r\n    if (req._body) {\r\n      debug('body already parsed')\r\n      next()\r\n      return\r\n    }\r\n\r\n    req.body = req.body || {}\r\n\r\n    // skip requests without bodies\r\n    if (!typeis.hasBody(req)) {\r\n      debug('skip empty body')\r\n      next()\r\n      return\r\n    }\r\n\r\n    debug('content-type %j', req.headers['content-type'])\r\n\r\n    // determine if request should be parsed\r\n    if (!shouldParse(req)) {\r\n      debug('skip parsing')\r\n      next()\r\n      return\r\n    }\r\n\r\n    // assert charset\r\n    var charset = getCharset(req) || 'utf-8'\r\n    if (charset !== 'utf-8') {\r\n      debug('invalid charset')\r\n      next(createError(415, 'unsupported charset \"' + charset.toUpperCase() + '\"', {\r\n        charset: charset,\r\n        type: 'charset.unsupported'\r\n      }))\r\n      return\r\n    }\r\n\r\n    // read\r\n    read(req, res, next, parse, debug, {\r\n      debug: debug,\r\n      encoding: charset,\r\n      inflate: inflate,\r\n      limit: limit,\r\n      verify: verify\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the extended query parser.\r\n *\r\n * @param {object} options\r\n */\r\n\r\nfunction extendedparser (options) {\r\n  var parameterLimit = options.parameterLimit !== undefined\r\n    ? options.parameterLimit\r\n    : 1000\r\n  var parse = parser('qs')\r\n\r\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\r\n    throw new TypeError('option parameterLimit must be a positive number')\r\n  }\r\n\r\n  if (isFinite(parameterLimit)) {\r\n    parameterLimit = parameterLimit | 0\r\n  }\r\n\r\n  return function queryparse (body) {\r\n    var paramCount = parameterCount(body, parameterLimit)\r\n\r\n    if (paramCount === undefined) {\r\n      debug('too many parameters')\r\n      throw createError(413, 'too many parameters', {\r\n        type: 'parameters.too.many'\r\n      })\r\n    }\r\n\r\n    var arrayLimit = Math.max(100, paramCount)\r\n\r\n    debug('parse extended urlencoding')\r\n    return parse(body, {\r\n      allowPrototypes: true,\r\n      arrayLimit: arrayLimit,\r\n      depth: Infinity,\r\n      parameterLimit: parameterLimit\r\n    })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the charset of a request.\r\n *\r\n * @param {object} req\r\n * @api private\r\n */\r\n\r\nfunction getCharset (req) {\r\n  try {\r\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n\r\n/**\r\n * Count the number of parameters, stopping once limit reached\r\n *\r\n * @param {string} body\r\n * @param {number} limit\r\n * @api private\r\n */\r\n\r\nfunction parameterCount (body, limit) {\r\n  var count = 0\r\n  var index = 0\r\n\r\n  while ((index = body.indexOf('&', index)) !== -1) {\r\n    count++\r\n    index++\r\n\r\n    if (count === limit) {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  return count\r\n}\r\n\r\n/**\r\n * Get parser for module name dynamically.\r\n *\r\n * @param {string} name\r\n * @return {function}\r\n * @api private\r\n */\r\n\r\nfunction parser (name) {\r\n  var mod = parsers[name]\r\n\r\n  if (mod !== undefined) {\r\n    return mod.parse\r\n  }\r\n\r\n  // this uses a switch for static require analysis\r\n  switch (name) {\r\n    case 'qs':\r\n      mod = require('qs')\r\n      break\r\n    case 'querystring':\r\n      mod = require('querystring')\r\n      break\r\n  }\r\n\r\n  // store to prevent invoking require()\r\n  parsers[name] = mod\r\n\r\n  return mod.parse\r\n}\r\n\r\n/**\r\n * Get the simple query parser.\r\n *\r\n * @param {object} options\r\n */\r\n\r\nfunction simpleparser (options) {\r\n  var parameterLimit = options.parameterLimit !== undefined\r\n    ? options.parameterLimit\r\n    : 1000\r\n  var parse = parser('querystring')\r\n\r\n  if (isNaN(parameterLimit) || parameterLimit < 1) {\r\n    throw new TypeError('option parameterLimit must be a positive number')\r\n  }\r\n\r\n  if (isFinite(parameterLimit)) {\r\n    parameterLimit = parameterLimit | 0\r\n  }\r\n\r\n  return function queryparse (body) {\r\n    var paramCount = parameterCount(body, parameterLimit)\r\n\r\n    if (paramCount === undefined) {\r\n      debug('too many parameters')\r\n      throw createError(413, 'too many parameters', {\r\n        type: 'parameters.too.many'\r\n      })\r\n    }\r\n\r\n    debug('parse urlencoding')\r\n    return parse(body, undefined, undefined, { maxKeys: parameterLimit })\r\n  }\r\n}\r\n\r\n/**\r\n * Get the simple type checker.\r\n *\r\n * @param {string} type\r\n * @return {function}\r\n */\r\n\r\nfunction typeChecker (type) {\r\n  return function checkType (req) {\r\n    return Boolean(typeis(req, type))\r\n  }\r\n}\r\n"]}