{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/**\r\n * Module dependencies.\r\n */\r\n\r\nvar crypto = require('crypto');\r\n\r\n/**\r\n * Sign the given `val` with `secret`.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String}\r\n * @api private\r\n */\r\n\r\nexports.sign = function(val, secret){\r\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\r\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\r\n  return val + '.' + crypto\r\n    .createHmac('sha256', secret)\r\n    .update(val)\r\n    .digest('base64')\r\n    .replace(/\\=+$/, '');\r\n};\r\n\r\n/**\r\n * Unsign and decode the given `val` with `secret`,\r\n * returning `false` if the signature is invalid.\r\n *\r\n * @param {String} val\r\n * @param {String} secret\r\n * @return {String|Boolean}\r\n * @api private\r\n */\r\n\r\nexports.unsign = function(val, secret){\r\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\r\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\r\n  var str = val.slice(0, val.lastIndexOf('.'))\r\n    , mac = exports.sign(str, secret);\r\n  \r\n  return sha1(mac) == sha1(val) ? str : false;\r\n};\r\n\r\n/**\r\n * Private\r\n */\r\n\r\nfunction sha1(str){\r\n  return crypto.createHash('sha1').update(str).digest('hex');\r\n}\r\n"]}