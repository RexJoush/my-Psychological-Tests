{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * vary\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = vary\r\nmodule.exports.append = append\r\n\r\n/**\r\n * RegExp to match field-name in RFC 7230 sec 3.2\r\n *\r\n * field-name    = token\r\n * token         = 1*tchar\r\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\r\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n *               / DIGIT / ALPHA\r\n *               ; any VCHAR, except delimiters\r\n */\r\n\r\nvar FIELD_NAME_REGEXP = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/\r\n\r\n/**\r\n * Append a field to a vary header.\r\n *\r\n * @param {String} header\r\n * @param {String|Array} field\r\n * @return {String}\r\n * @public\r\n */\r\n\r\nfunction append (header, field) {\r\n  if (typeof header !== 'string') {\r\n    throw new TypeError('header argument is required')\r\n  }\r\n\r\n  if (!field) {\r\n    throw new TypeError('field argument is required')\r\n  }\r\n\r\n  // get fields array\r\n  var fields = !Array.isArray(field)\r\n    ? parse(String(field))\r\n    : field\r\n\r\n  // assert on invalid field names\r\n  for (var j = 0; j < fields.length; j++) {\r\n    if (!FIELD_NAME_REGEXP.test(fields[j])) {\r\n      throw new TypeError('field argument contains an invalid header name')\r\n    }\r\n  }\r\n\r\n  // existing, unspecified vary\r\n  if (header === '*') {\r\n    return header\r\n  }\r\n\r\n  // enumerate current values\r\n  var val = header\r\n  var vals = parse(header.toLowerCase())\r\n\r\n  // unspecified vary\r\n  if (fields.indexOf('*') !== -1 || vals.indexOf('*') !== -1) {\r\n    return '*'\r\n  }\r\n\r\n  for (var i = 0; i < fields.length; i++) {\r\n    var fld = fields[i].toLowerCase()\r\n\r\n    // append value (case-preserving)\r\n    if (vals.indexOf(fld) === -1) {\r\n      vals.push(fld)\r\n      val = val\r\n        ? val + ', ' + fields[i]\r\n        : fields[i]\r\n    }\r\n  }\r\n\r\n  return val\r\n}\r\n\r\n/**\r\n * Parse a vary header into an array.\r\n *\r\n * @param {String} header\r\n * @return {Array}\r\n * @private\r\n */\r\n\r\nfunction parse (header) {\r\n  var end = 0\r\n  var list = []\r\n  var start = 0\r\n\r\n  // gather tokens\r\n  for (var i = 0, len = header.length; i < len; i++) {\r\n    switch (header.charCodeAt(i)) {\r\n      case 0x20: /*   */\r\n        if (start === end) {\r\n          start = end = i + 1\r\n        }\r\n        break\r\n      case 0x2c: /* , */\r\n        list.push(header.substring(start, end))\r\n        start = end = i + 1\r\n        break\r\n      default:\r\n        end = i + 1\r\n        break\r\n    }\r\n  }\r\n\r\n  // final token\r\n  list.push(header.substring(start, end))\r\n\r\n  return list\r\n}\r\n\r\n/**\r\n * Mark that a request is varied on a header field.\r\n *\r\n * @param {Object} res\r\n * @param {String|Array} field\r\n * @public\r\n */\r\n\r\nfunction vary (res, field) {\r\n  if (!res || !res.getHeader || !res.setHeader) {\r\n    // quack quack\r\n    throw new TypeError('res argument is required')\r\n  }\r\n\r\n  // get existing header\r\n  var val = res.getHeader('Vary') || ''\r\n  var header = Array.isArray(val)\r\n    ? val.join(', ')\r\n    : String(val)\r\n\r\n  // set new header\r\n  if ((val = append(header, field))) {\r\n    res.setHeader('Vary', val)\r\n  }\r\n}\r\n"]}