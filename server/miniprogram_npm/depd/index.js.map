{"version":3,"sources":["index.js","lib\\compat\\index.js","lib\\compat\\callsite-tostring.js","lib\\compat\\event-listener-count.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ACHA,AFMA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA,ADGA;ADIA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA,AENA;AFOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\r\n * depd\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\n\r\nvar callSiteToString = require('./lib/compat').callSiteToString\r\nvar eventListenerCount = require('./lib/compat').eventListenerCount\r\nvar relative = require('path').relative\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = depd\r\n\r\n/**\r\n * Get the path to base files on.\r\n */\r\n\r\nvar basePath = process.cwd()\r\n\r\n/**\r\n * Determine if namespace is contained in the string.\r\n */\r\n\r\nfunction containsNamespace (str, namespace) {\r\n  var vals = str.split(/[ ,]+/)\r\n  var ns = String(namespace).toLowerCase()\r\n\r\n  for (var i = 0; i < vals.length; i++) {\r\n    var val = vals[i]\r\n\r\n    // namespace contained\r\n    if (val && (val === '*' || val.toLowerCase() === ns)) {\r\n      return true\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Convert a data descriptor to accessor descriptor.\r\n */\r\n\r\nfunction convertDataDescriptorToAccessor (obj, prop, message) {\r\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\r\n  var value = descriptor.value\r\n\r\n  descriptor.get = function getter () { return value }\r\n\r\n  if (descriptor.writable) {\r\n    descriptor.set = function setter (val) { return (value = val) }\r\n  }\r\n\r\n  delete descriptor.value\r\n  delete descriptor.writable\r\n\r\n  Object.defineProperty(obj, prop, descriptor)\r\n\r\n  return descriptor\r\n}\r\n\r\n/**\r\n * Create arguments string to keep arity.\r\n */\r\n\r\nfunction createArgumentsString (arity) {\r\n  var str = ''\r\n\r\n  for (var i = 0; i < arity; i++) {\r\n    str += ', arg' + i\r\n  }\r\n\r\n  return str.substr(2)\r\n}\r\n\r\n/**\r\n * Create stack string from stack.\r\n */\r\n\r\nfunction createStackString (stack) {\r\n  var str = this.name + ': ' + this.namespace\r\n\r\n  if (this.message) {\r\n    str += ' deprecated ' + this.message\r\n  }\r\n\r\n  for (var i = 0; i < stack.length; i++) {\r\n    str += '\\n    at ' + callSiteToString(stack[i])\r\n  }\r\n\r\n  return str\r\n}\r\n\r\n/**\r\n * Create deprecate for namespace in caller.\r\n */\r\n\r\nfunction depd (namespace) {\r\n  if (!namespace) {\r\n    throw new TypeError('argument namespace is required')\r\n  }\r\n\r\n  var stack = getStack()\r\n  var site = callSiteLocation(stack[1])\r\n  var file = site[0]\r\n\r\n  function deprecate (message) {\r\n    // call to self as log\r\n    log.call(deprecate, message)\r\n  }\r\n\r\n  deprecate._file = file\r\n  deprecate._ignored = isignored(namespace)\r\n  deprecate._namespace = namespace\r\n  deprecate._traced = istraced(namespace)\r\n  deprecate._warned = Object.create(null)\r\n\r\n  deprecate.function = wrapfunction\r\n  deprecate.property = wrapproperty\r\n\r\n  return deprecate\r\n}\r\n\r\n/**\r\n * Determine if namespace is ignored.\r\n */\r\n\r\nfunction isignored (namespace) {\r\n  /* istanbul ignore next: tested in a child processs */\r\n  if (process.noDeprecation) {\r\n    // --no-deprecation support\r\n    return true\r\n  }\r\n\r\n  var str = process.env.NO_DEPRECATION || ''\r\n\r\n  // namespace ignored\r\n  return containsNamespace(str, namespace)\r\n}\r\n\r\n/**\r\n * Determine if namespace is traced.\r\n */\r\n\r\nfunction istraced (namespace) {\r\n  /* istanbul ignore next: tested in a child processs */\r\n  if (process.traceDeprecation) {\r\n    // --trace-deprecation support\r\n    return true\r\n  }\r\n\r\n  var str = process.env.TRACE_DEPRECATION || ''\r\n\r\n  // namespace traced\r\n  return containsNamespace(str, namespace)\r\n}\r\n\r\n/**\r\n * Display deprecation message.\r\n */\r\n\r\nfunction log (message, site) {\r\n  var haslisteners = eventListenerCount(process, 'deprecation') !== 0\r\n\r\n  // abort early if no destination\r\n  if (!haslisteners && this._ignored) {\r\n    return\r\n  }\r\n\r\n  var caller\r\n  var callFile\r\n  var callSite\r\n  var depSite\r\n  var i = 0\r\n  var seen = false\r\n  var stack = getStack()\r\n  var file = this._file\r\n\r\n  if (site) {\r\n    // provided site\r\n    depSite = site\r\n    callSite = callSiteLocation(stack[1])\r\n    callSite.name = depSite.name\r\n    file = callSite[0]\r\n  } else {\r\n    // get call site\r\n    i = 2\r\n    depSite = callSiteLocation(stack[i])\r\n    callSite = depSite\r\n  }\r\n\r\n  // get caller of deprecated thing in relation to file\r\n  for (; i < stack.length; i++) {\r\n    caller = callSiteLocation(stack[i])\r\n    callFile = caller[0]\r\n\r\n    if (callFile === file) {\r\n      seen = true\r\n    } else if (callFile === this._file) {\r\n      file = this._file\r\n    } else if (seen) {\r\n      break\r\n    }\r\n  }\r\n\r\n  var key = caller\r\n    ? depSite.join(':') + '__' + caller.join(':')\r\n    : undefined\r\n\r\n  if (key !== undefined && key in this._warned) {\r\n    // already warned\r\n    return\r\n  }\r\n\r\n  this._warned[key] = true\r\n\r\n  // generate automatic message from call site\r\n  var msg = message\r\n  if (!msg) {\r\n    msg = callSite === depSite || !callSite.name\r\n      ? defaultMessage(depSite)\r\n      : defaultMessage(callSite)\r\n  }\r\n\r\n  // emit deprecation if listeners exist\r\n  if (haslisteners) {\r\n    var err = DeprecationError(this._namespace, msg, stack.slice(i))\r\n    process.emit('deprecation', err)\r\n    return\r\n  }\r\n\r\n  // format and write message\r\n  var format = process.stderr.isTTY\r\n    ? formatColor\r\n    : formatPlain\r\n  var output = format.call(this, msg, caller, stack.slice(i))\r\n  process.stderr.write(output + '\\n', 'utf8')\r\n}\r\n\r\n/**\r\n * Get call site location as array.\r\n */\r\n\r\nfunction callSiteLocation (callSite) {\r\n  var file = callSite.getFileName() || '<anonymous>'\r\n  var line = callSite.getLineNumber()\r\n  var colm = callSite.getColumnNumber()\r\n\r\n  if (callSite.isEval()) {\r\n    file = callSite.getEvalOrigin() + ', ' + file\r\n  }\r\n\r\n  var site = [file, line, colm]\r\n\r\n  site.callSite = callSite\r\n  site.name = callSite.getFunctionName()\r\n\r\n  return site\r\n}\r\n\r\n/**\r\n * Generate a default message from the site.\r\n */\r\n\r\nfunction defaultMessage (site) {\r\n  var callSite = site.callSite\r\n  var funcName = site.name\r\n\r\n  // make useful anonymous name\r\n  if (!funcName) {\r\n    funcName = '<anonymous@' + formatLocation(site) + '>'\r\n  }\r\n\r\n  var context = callSite.getThis()\r\n  var typeName = context && callSite.getTypeName()\r\n\r\n  // ignore useless type name\r\n  if (typeName === 'Object') {\r\n    typeName = undefined\r\n  }\r\n\r\n  // make useful type name\r\n  if (typeName === 'Function') {\r\n    typeName = context.name || typeName\r\n  }\r\n\r\n  return typeName && callSite.getMethodName()\r\n    ? typeName + '.' + funcName\r\n    : funcName\r\n}\r\n\r\n/**\r\n * Format deprecation message without color.\r\n */\r\n\r\nfunction formatPlain (msg, caller, stack) {\r\n  var timestamp = new Date().toUTCString()\r\n\r\n  var formatted = timestamp +\r\n    ' ' + this._namespace +\r\n    ' deprecated ' + msg\r\n\r\n  // add stack trace\r\n  if (this._traced) {\r\n    for (var i = 0; i < stack.length; i++) {\r\n      formatted += '\\n    at ' + callSiteToString(stack[i])\r\n    }\r\n\r\n    return formatted\r\n  }\r\n\r\n  if (caller) {\r\n    formatted += ' at ' + formatLocation(caller)\r\n  }\r\n\r\n  return formatted\r\n}\r\n\r\n/**\r\n * Format deprecation message with color.\r\n */\r\n\r\nfunction formatColor (msg, caller, stack) {\r\n  var formatted = '\\x1b[36;1m' + this._namespace + '\\x1b[22;39m' + // bold cyan\r\n    ' \\x1b[33;1mdeprecated\\x1b[22;39m' + // bold yellow\r\n    ' \\x1b[0m' + msg + '\\x1b[39m' // reset\r\n\r\n  // add stack trace\r\n  if (this._traced) {\r\n    for (var i = 0; i < stack.length; i++) {\r\n      formatted += '\\n    \\x1b[36mat ' + callSiteToString(stack[i]) + '\\x1b[39m' // cyan\r\n    }\r\n\r\n    return formatted\r\n  }\r\n\r\n  if (caller) {\r\n    formatted += ' \\x1b[36m' + formatLocation(caller) + '\\x1b[39m' // cyan\r\n  }\r\n\r\n  return formatted\r\n}\r\n\r\n/**\r\n * Format call site location.\r\n */\r\n\r\nfunction formatLocation (callSite) {\r\n  return relative(basePath, callSite[0]) +\r\n    ':' + callSite[1] +\r\n    ':' + callSite[2]\r\n}\r\n\r\n/**\r\n * Get the stack as array of call sites.\r\n */\r\n\r\nfunction getStack () {\r\n  var limit = Error.stackTraceLimit\r\n  var obj = {}\r\n  var prep = Error.prepareStackTrace\r\n\r\n  Error.prepareStackTrace = prepareObjectStackTrace\r\n  Error.stackTraceLimit = Math.max(10, limit)\r\n\r\n  // capture the stack\r\n  Error.captureStackTrace(obj)\r\n\r\n  // slice this function off the top\r\n  var stack = obj.stack.slice(1)\r\n\r\n  Error.prepareStackTrace = prep\r\n  Error.stackTraceLimit = limit\r\n\r\n  return stack\r\n}\r\n\r\n/**\r\n * Capture call site stack from v8.\r\n */\r\n\r\nfunction prepareObjectStackTrace (obj, stack) {\r\n  return stack\r\n}\r\n\r\n/**\r\n * Return a wrapped function in a deprecation message.\r\n */\r\n\r\nfunction wrapfunction (fn, message) {\r\n  if (typeof fn !== 'function') {\r\n    throw new TypeError('argument fn must be a function')\r\n  }\r\n\r\n  var args = createArgumentsString(fn.length)\r\n  var deprecate = this // eslint-disable-line no-unused-vars\r\n  var stack = getStack()\r\n  var site = callSiteLocation(stack[1])\r\n\r\n  site.name = fn.name\r\n\r\n   // eslint-disable-next-line no-eval\r\n  var deprecatedfn = eval('(function (' + args + ') {\\n' +\r\n    '\"use strict\"\\n' +\r\n    'log.call(deprecate, message, site)\\n' +\r\n    'return fn.apply(this, arguments)\\n' +\r\n    '})')\r\n\r\n  return deprecatedfn\r\n}\r\n\r\n/**\r\n * Wrap property in a deprecation message.\r\n */\r\n\r\nfunction wrapproperty (obj, prop, message) {\r\n  if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {\r\n    throw new TypeError('argument obj must be object')\r\n  }\r\n\r\n  var descriptor = Object.getOwnPropertyDescriptor(obj, prop)\r\n\r\n  if (!descriptor) {\r\n    throw new TypeError('must call property on owner object')\r\n  }\r\n\r\n  if (!descriptor.configurable) {\r\n    throw new TypeError('property must be configurable')\r\n  }\r\n\r\n  var deprecate = this\r\n  var stack = getStack()\r\n  var site = callSiteLocation(stack[1])\r\n\r\n  // set site name\r\n  site.name = prop\r\n\r\n  // convert data descriptor\r\n  if ('value' in descriptor) {\r\n    descriptor = convertDataDescriptorToAccessor(obj, prop, message)\r\n  }\r\n\r\n  var get = descriptor.get\r\n  var set = descriptor.set\r\n\r\n  // wrap getter\r\n  if (typeof get === 'function') {\r\n    descriptor.get = function getter () {\r\n      log.call(deprecate, message, site)\r\n      return get.apply(this, arguments)\r\n    }\r\n  }\r\n\r\n  // wrap setter\r\n  if (typeof set === 'function') {\r\n    descriptor.set = function setter () {\r\n      log.call(deprecate, message, site)\r\n      return set.apply(this, arguments)\r\n    }\r\n  }\r\n\r\n  Object.defineProperty(obj, prop, descriptor)\r\n}\r\n\r\n/**\r\n * Create DeprecationError for deprecation\r\n */\r\n\r\nfunction DeprecationError (namespace, message, stack) {\r\n  var error = new Error()\r\n  var stackString\r\n\r\n  Object.defineProperty(error, 'constructor', {\r\n    value: DeprecationError\r\n  })\r\n\r\n  Object.defineProperty(error, 'message', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: message,\r\n    writable: true\r\n  })\r\n\r\n  Object.defineProperty(error, 'name', {\r\n    enumerable: false,\r\n    configurable: true,\r\n    value: 'DeprecationError',\r\n    writable: true\r\n  })\r\n\r\n  Object.defineProperty(error, 'namespace', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    value: namespace,\r\n    writable: true\r\n  })\r\n\r\n  Object.defineProperty(error, 'stack', {\r\n    configurable: true,\r\n    enumerable: false,\r\n    get: function () {\r\n      if (stackString !== undefined) {\r\n        return stackString\r\n      }\r\n\r\n      // prepare stack trace\r\n      return (stackString = createStackString.call(this, stack))\r\n    },\r\n    set: function setter (val) {\r\n      stackString = val\r\n    }\r\n  })\r\n\r\n  return error\r\n}\r\n","/*!\r\n * depd\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar EventEmitter = require('events').EventEmitter\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nlazyProperty(module.exports, 'callSiteToString', function callSiteToString () {\r\n  var limit = Error.stackTraceLimit\r\n  var obj = {}\r\n  var prep = Error.prepareStackTrace\r\n\r\n  function prepareObjectStackTrace (obj, stack) {\r\n    return stack\r\n  }\r\n\r\n  Error.prepareStackTrace = prepareObjectStackTrace\r\n  Error.stackTraceLimit = 2\r\n\r\n  // capture the stack\r\n  Error.captureStackTrace(obj)\r\n\r\n  // slice the stack\r\n  var stack = obj.stack.slice()\r\n\r\n  Error.prepareStackTrace = prep\r\n  Error.stackTraceLimit = limit\r\n\r\n  return stack[0].toString ? toString : require('./callsite-tostring')\r\n})\r\n\r\nlazyProperty(module.exports, 'eventListenerCount', function eventListenerCount () {\r\n  return EventEmitter.listenerCount || require('./event-listener-count')\r\n})\r\n\r\n/**\r\n * Define a lazy property.\r\n */\r\n\r\nfunction lazyProperty (obj, prop, getter) {\r\n  function get () {\r\n    var val = getter()\r\n\r\n    Object.defineProperty(obj, prop, {\r\n      configurable: true,\r\n      enumerable: true,\r\n      value: val\r\n    })\r\n\r\n    return val\r\n  }\r\n\r\n  Object.defineProperty(obj, prop, {\r\n    configurable: true,\r\n    enumerable: true,\r\n    get: get\r\n  })\r\n}\r\n\r\n/**\r\n * Call toString() on the obj\r\n */\r\n\r\nfunction toString (obj) {\r\n  return obj.toString()\r\n}\r\n","/*!\r\n * depd\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nmodule.exports = callSiteToString\r\n\r\n/**\r\n * Format a CallSite file location to a string.\r\n */\r\n\r\nfunction callSiteFileLocation (callSite) {\r\n  var fileName\r\n  var fileLocation = ''\r\n\r\n  if (callSite.isNative()) {\r\n    fileLocation = 'native'\r\n  } else if (callSite.isEval()) {\r\n    fileName = callSite.getScriptNameOrSourceURL()\r\n    if (!fileName) {\r\n      fileLocation = callSite.getEvalOrigin()\r\n    }\r\n  } else {\r\n    fileName = callSite.getFileName()\r\n  }\r\n\r\n  if (fileName) {\r\n    fileLocation += fileName\r\n\r\n    var lineNumber = callSite.getLineNumber()\r\n    if (lineNumber != null) {\r\n      fileLocation += ':' + lineNumber\r\n\r\n      var columnNumber = callSite.getColumnNumber()\r\n      if (columnNumber) {\r\n        fileLocation += ':' + columnNumber\r\n      }\r\n    }\r\n  }\r\n\r\n  return fileLocation || 'unknown source'\r\n}\r\n\r\n/**\r\n * Format a CallSite to a string.\r\n */\r\n\r\nfunction callSiteToString (callSite) {\r\n  var addSuffix = true\r\n  var fileLocation = callSiteFileLocation(callSite)\r\n  var functionName = callSite.getFunctionName()\r\n  var isConstructor = callSite.isConstructor()\r\n  var isMethodCall = !(callSite.isToplevel() || isConstructor)\r\n  var line = ''\r\n\r\n  if (isMethodCall) {\r\n    var methodName = callSite.getMethodName()\r\n    var typeName = getConstructorName(callSite)\r\n\r\n    if (functionName) {\r\n      if (typeName && functionName.indexOf(typeName) !== 0) {\r\n        line += typeName + '.'\r\n      }\r\n\r\n      line += functionName\r\n\r\n      if (methodName && functionName.lastIndexOf('.' + methodName) !== functionName.length - methodName.length - 1) {\r\n        line += ' [as ' + methodName + ']'\r\n      }\r\n    } else {\r\n      line += typeName + '.' + (methodName || '<anonymous>')\r\n    }\r\n  } else if (isConstructor) {\r\n    line += 'new ' + (functionName || '<anonymous>')\r\n  } else if (functionName) {\r\n    line += functionName\r\n  } else {\r\n    addSuffix = false\r\n    line += fileLocation\r\n  }\r\n\r\n  if (addSuffix) {\r\n    line += ' (' + fileLocation + ')'\r\n  }\r\n\r\n  return line\r\n}\r\n\r\n/**\r\n * Get constructor name of reviver.\r\n */\r\n\r\nfunction getConstructorName (obj) {\r\n  var receiver = obj.receiver\r\n  return (receiver.constructor && receiver.constructor.name) || null\r\n}\r\n","/*!\r\n * depd\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = eventListenerCount\r\n\r\n/**\r\n * Get the count of listeners on an event emitter of a specific type.\r\n */\r\n\r\nfunction eventListenerCount (emitter, type) {\r\n  return emitter.listeners(type).length\r\n}\r\n"]}