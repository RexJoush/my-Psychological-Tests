{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * accepts\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar Negotiator = require('negotiator')\r\nvar mime = require('mime-types')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Accepts\r\n\r\n/**\r\n * Create a new Accepts object for the given req.\r\n *\r\n * @param {object} req\r\n * @public\r\n */\r\n\r\nfunction Accepts (req) {\r\n  if (!(this instanceof Accepts)) {\r\n    return new Accepts(req)\r\n  }\r\n\r\n  this.headers = req.headers\r\n  this.negotiator = new Negotiator(req)\r\n}\r\n\r\n/**\r\n * Check if the given `type(s)` is acceptable, returning\r\n * the best match when true, otherwise `undefined`, in which\r\n * case you should respond with 406 \"Not Acceptable\".\r\n *\r\n * The `type` value may be a single mime type string\r\n * such as \"application/json\", the extension name\r\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\r\n * or array is given the _best_ match, if any is returned.\r\n *\r\n * Examples:\r\n *\r\n *     // Accept: text/html\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('html');\r\n *     // => \"html\"\r\n *     this.types('text/html');\r\n *     // => \"text/html\"\r\n *     this.types('json', 'text');\r\n *     // => \"json\"\r\n *     this.types('application/json');\r\n *     // => \"application/json\"\r\n *\r\n *     // Accept: text/*, application/json\r\n *     this.types('image/png');\r\n *     this.types('png');\r\n *     // => undefined\r\n *\r\n *     // Accept: text/*;q=.5, application/json\r\n *     this.types(['html', 'json']);\r\n *     this.types('html', 'json');\r\n *     // => \"json\"\r\n *\r\n * @param {String|Array} types...\r\n * @return {String|Array|Boolean}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.type =\r\nAccepts.prototype.types = function (types_) {\r\n  var types = types_\r\n\r\n  // support flattened arguments\r\n  if (types && !Array.isArray(types)) {\r\n    types = new Array(arguments.length)\r\n    for (var i = 0; i < types.length; i++) {\r\n      types[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no types, return all requested types\r\n  if (!types || types.length === 0) {\r\n    return this.negotiator.mediaTypes()\r\n  }\r\n\r\n  // no accept header, return first given type\r\n  if (!this.headers.accept) {\r\n    return types[0]\r\n  }\r\n\r\n  var mimes = types.map(extToMime)\r\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime))\r\n  var first = accepts[0]\r\n\r\n  return first\r\n    ? types[mimes.indexOf(first)]\r\n    : false\r\n}\r\n\r\n/**\r\n * Return accepted encodings or best fit based on `encodings`.\r\n *\r\n * Given `Accept-Encoding: gzip, deflate`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['gzip', 'deflate']\r\n *\r\n * @param {String|Array} encodings...\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.encoding =\r\nAccepts.prototype.encodings = function (encodings_) {\r\n  var encodings = encodings_\r\n\r\n  // support flattened arguments\r\n  if (encodings && !Array.isArray(encodings)) {\r\n    encodings = new Array(arguments.length)\r\n    for (var i = 0; i < encodings.length; i++) {\r\n      encodings[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no encodings, return all requested encodings\r\n  if (!encodings || encodings.length === 0) {\r\n    return this.negotiator.encodings()\r\n  }\r\n\r\n  return this.negotiator.encodings(encodings)[0] || false\r\n}\r\n\r\n/**\r\n * Return accepted charsets or best fit based on `charsets`.\r\n *\r\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['utf-8', 'utf-7', 'iso-8859-1']\r\n *\r\n * @param {String|Array} charsets...\r\n * @return {String|Array}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.charset =\r\nAccepts.prototype.charsets = function (charsets_) {\r\n  var charsets = charsets_\r\n\r\n  // support flattened arguments\r\n  if (charsets && !Array.isArray(charsets)) {\r\n    charsets = new Array(arguments.length)\r\n    for (var i = 0; i < charsets.length; i++) {\r\n      charsets[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no charsets, return all requested charsets\r\n  if (!charsets || charsets.length === 0) {\r\n    return this.negotiator.charsets()\r\n  }\r\n\r\n  return this.negotiator.charsets(charsets)[0] || false\r\n}\r\n\r\n/**\r\n * Return accepted languages or best fit based on `langs`.\r\n *\r\n * Given `Accept-Language: en;q=0.8, es, pt`\r\n * an array sorted by quality is returned:\r\n *\r\n *     ['es', 'pt', 'en']\r\n *\r\n * @param {String|Array} langs...\r\n * @return {Array|String}\r\n * @public\r\n */\r\n\r\nAccepts.prototype.lang =\r\nAccepts.prototype.langs =\r\nAccepts.prototype.language =\r\nAccepts.prototype.languages = function (languages_) {\r\n  var languages = languages_\r\n\r\n  // support flattened arguments\r\n  if (languages && !Array.isArray(languages)) {\r\n    languages = new Array(arguments.length)\r\n    for (var i = 0; i < languages.length; i++) {\r\n      languages[i] = arguments[i]\r\n    }\r\n  }\r\n\r\n  // no languages, return all requested languages\r\n  if (!languages || languages.length === 0) {\r\n    return this.negotiator.languages()\r\n  }\r\n\r\n  return this.negotiator.languages(languages)[0] || false\r\n}\r\n\r\n/**\r\n * Convert extnames to mime.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction extToMime (type) {\r\n  return type.indexOf('/') === -1\r\n    ? mime.lookup(type)\r\n    : type\r\n}\r\n\r\n/**\r\n * Check if mime is valid.\r\n *\r\n * @param {String} type\r\n * @return {String}\r\n * @private\r\n */\r\n\r\nfunction validMime (type) {\r\n  return typeof type === 'string'\r\n}\r\n"]}