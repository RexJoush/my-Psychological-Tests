{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * content-disposition\r\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = contentDisposition\r\nmodule.exports.parse = parse\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar basename = require('path').basename\r\nvar Buffer = require('safe-buffer').Buffer\r\n\r\n/**\r\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\r\n * @private\r\n */\r\n\r\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * RegExp to match percent encoding escape.\r\n * @private\r\n */\r\n\r\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/\r\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g\r\n\r\n/**\r\n * RegExp to match non-latin1 characters.\r\n * @private\r\n */\r\n\r\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n * @private\r\n */\r\n\r\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n * @private\r\n */\r\n\r\nvar QUOTE_REGEXP = /([\\\\\"])/g\r\n\r\n/**\r\n * RegExp for various RFC 2616 grammar\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * HT            = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n * @private\r\n */\r\n\r\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g // eslint-disable-line no-control-regex\r\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/\r\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/\r\n\r\n/**\r\n * RegExp for various RFC 5987 grammar\r\n *\r\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\r\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\r\n * mime-charset  = 1*mime-charsetc\r\n * mime-charsetc = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\r\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\r\n *               / \"{\" / \"}\" / \"~\"\r\n * language      = ( 2*3ALPHA [ extlang ] )\r\n *               / 4ALPHA\r\n *               / 5*8ALPHA\r\n * extlang       = *3( \"-\" 3ALPHA )\r\n * value-chars   = *( pct-encoded / attr-char )\r\n * pct-encoded   = \"%\" HEXDIG HEXDIG\r\n * attr-char     = ALPHA / DIGIT\r\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\r\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\r\n * @private\r\n */\r\n\r\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/\r\n\r\n/**\r\n * RegExp for various RFC 6266 grammar\r\n *\r\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\r\n * disp-ext-type    = token\r\n * disposition-parm = filename-parm | disp-ext-parm\r\n * filename-parm    = \"filename\" \"=\" value\r\n *                  | \"filename*\" \"=\" ext-value\r\n * disp-ext-parm    = token \"=\" value\r\n *                  | ext-token \"=\" ext-value\r\n * ext-token        = <the characters in token, followed by \"*\">\r\n * @private\r\n */\r\n\r\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/ // eslint-disable-line no-control-regex\r\n\r\n/**\r\n * Create an attachment Content-Disposition header.\r\n *\r\n * @param {string} [filename]\r\n * @param {object} [options]\r\n * @param {string} [options.type=attachment]\r\n * @param {string|boolean} [options.fallback=true]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction contentDisposition (filename, options) {\r\n  var opts = options || {}\r\n\r\n  // get type\r\n  var type = opts.type || 'attachment'\r\n\r\n  // get parameters\r\n  var params = createparams(filename, opts.fallback)\r\n\r\n  // format into string\r\n  return format(new ContentDisposition(type, params))\r\n}\r\n\r\n/**\r\n * Create parameters object from filename and fallback.\r\n *\r\n * @param {string} [filename]\r\n * @param {string|boolean} [fallback=true]\r\n * @return {object}\r\n * @private\r\n */\r\n\r\nfunction createparams (filename, fallback) {\r\n  if (filename === undefined) {\r\n    return\r\n  }\r\n\r\n  var params = {}\r\n\r\n  if (typeof filename !== 'string') {\r\n    throw new TypeError('filename must be a string')\r\n  }\r\n\r\n  // fallback defaults to true\r\n  if (fallback === undefined) {\r\n    fallback = true\r\n  }\r\n\r\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\r\n    throw new TypeError('fallback must be a string or boolean')\r\n  }\r\n\r\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\r\n    throw new TypeError('fallback must be ISO-8859-1 string')\r\n  }\r\n\r\n  // restrict to file base name\r\n  var name = basename(filename)\r\n\r\n  // determine if name is suitable for quoted string\r\n  var isQuotedString = TEXT_REGEXP.test(name)\r\n\r\n  // generate fallback name\r\n  var fallbackName = typeof fallback !== 'string'\r\n    ? fallback && getlatin1(name)\r\n    : basename(fallback)\r\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name\r\n\r\n  // set extended filename parameter\r\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\r\n    params['filename*'] = name\r\n  }\r\n\r\n  // set filename parameter\r\n  if (isQuotedString || hasFallback) {\r\n    params.filename = hasFallback\r\n      ? fallbackName\r\n      : name\r\n  }\r\n\r\n  return params\r\n}\r\n\r\n/**\r\n * Format object to Content-Disposition header.\r\n *\r\n * @param {object} obj\r\n * @param {string} obj.type\r\n * @param {object} [obj.parameters]\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction format (obj) {\r\n  var parameters = obj.parameters\r\n  var type = obj.type\r\n\r\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  // start with normalized type\r\n  var string = String(type).toLowerCase()\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      var val = param.substr(-1) === '*'\r\n        ? ustring(parameters[param])\r\n        : qstring(parameters[param])\r\n\r\n      string += '; ' + param + '=' + val\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Decode a RFC 6987 field value (gracefully).\r\n *\r\n * @param {string} str\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction decodefield (str) {\r\n  var match = EXT_VALUE_REGEXP.exec(str)\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid extended field value')\r\n  }\r\n\r\n  var charset = match[1].toLowerCase()\r\n  var encoded = match[2]\r\n  var value\r\n\r\n  // to binary string\r\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode)\r\n\r\n  switch (charset) {\r\n    case 'iso-8859-1':\r\n      value = getlatin1(binary)\r\n      break\r\n    case 'utf-8':\r\n      value = Buffer.from(binary, 'binary').toString('utf8')\r\n      break\r\n    default:\r\n      throw new TypeError('unsupported charset in extended field')\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Get ISO-8859-1 version of string.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction getlatin1 (val) {\r\n  // simple Unicode -> ISO-8859-1 transformation\r\n  return String(val).replace(NON_LATIN1_REGEXP, '?')\r\n}\r\n\r\n/**\r\n * Parse Content-Disposition header string.\r\n *\r\n * @param {string} string\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse (string) {\r\n  if (!string || typeof string !== 'string') {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  var match = DISPOSITION_TYPE_REGEXP.exec(string)\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid type format')\r\n  }\r\n\r\n  // normalize type\r\n  var index = match[0].length\r\n  var type = match[1].toLowerCase()\r\n\r\n  var key\r\n  var names = []\r\n  var params = {}\r\n  var value\r\n\r\n  // calculate index to start at\r\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';'\r\n    ? index - 1\r\n    : index\r\n\r\n  // match parameters\r\n  while ((match = PARAM_REGEXP.exec(string))) {\r\n    if (match.index !== index) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n\r\n    index += match[0].length\r\n    key = match[1].toLowerCase()\r\n    value = match[2]\r\n\r\n    if (names.indexOf(key) !== -1) {\r\n      throw new TypeError('invalid duplicate parameter')\r\n    }\r\n\r\n    names.push(key)\r\n\r\n    if (key.indexOf('*') + 1 === key.length) {\r\n      // decode extended value\r\n      key = key.slice(0, -1)\r\n      value = decodefield(value)\r\n\r\n      // overwrite existing value\r\n      params[key] = value\r\n      continue\r\n    }\r\n\r\n    if (typeof params[key] === 'string') {\r\n      continue\r\n    }\r\n\r\n    if (value[0] === '\"') {\r\n      // remove quotes and escapes\r\n      value = value\r\n        .substr(1, value.length - 2)\r\n        .replace(QESC_REGEXP, '$1')\r\n    }\r\n\r\n    params[key] = value\r\n  }\r\n\r\n  if (index !== -1 && index !== string.length) {\r\n    throw new TypeError('invalid parameter format')\r\n  }\r\n\r\n  return new ContentDisposition(type, params)\r\n}\r\n\r\n/**\r\n * Percent decode a single character.\r\n *\r\n * @param {string} str\r\n * @param {string} hex\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction pdecode (str, hex) {\r\n  return String.fromCharCode(parseInt(hex, 16))\r\n}\r\n\r\n/**\r\n * Percent encode a single character.\r\n *\r\n * @param {string} char\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction pencode (char) {\r\n  return '%' + String(char)\r\n    .charCodeAt(0)\r\n    .toString(16)\r\n    .toUpperCase()\r\n}\r\n\r\n/**\r\n * Quote a string for HTTP.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction qstring (val) {\r\n  var str = String(val)\r\n\r\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Encode a Unicode string for HTTP (RFC 5987).\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @private\r\n */\r\n\r\nfunction ustring (val) {\r\n  var str = String(val)\r\n\r\n  // percent encode as UTF-8\r\n  var encoded = encodeURIComponent(str)\r\n    .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode)\r\n\r\n  return 'UTF-8\\'\\'' + encoded\r\n}\r\n\r\n/**\r\n * Class for parsed Content-Disposition header for v8 optimization\r\n *\r\n * @public\r\n * @param {string} type\r\n * @param {object} parameters\r\n * @constructor\r\n */\r\n\r\nfunction ContentDisposition (type, parameters) {\r\n  this.type = type\r\n  this.parameters = parameters\r\n}\r\n"]}