{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["/*!\r\n * http-errors\r\n * Copyright(c) 2014 Jonathan Ong\r\n * Copyright(c) 2016 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module dependencies.\r\n * @private\r\n */\r\n\r\nvar deprecate = require('depd')('http-errors')\r\nvar setPrototypeOf = require('setprototypeof')\r\nvar statuses = require('statuses')\r\nvar inherits = require('inherits')\r\nvar toIdentifier = require('toidentifier')\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = createError\r\nmodule.exports.HttpError = createHttpErrorConstructor()\r\n\r\n// Populate exports for all constructors\r\npopulateConstructorExports(module.exports, statuses.codes, module.exports.HttpError)\r\n\r\n/**\r\n * Get the code class of a status code.\r\n * @private\r\n */\r\n\r\nfunction codeClass (status) {\r\n  return Number(String(status).charAt(0) + '00')\r\n}\r\n\r\n/**\r\n * Create a new HTTP Error.\r\n *\r\n * @returns {Error}\r\n * @public\r\n */\r\n\r\nfunction createError () {\r\n  // so much arity going on ~_~\r\n  var err\r\n  var msg\r\n  var status = 500\r\n  var props = {}\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var arg = arguments[i]\r\n    if (arg instanceof Error) {\r\n      err = arg\r\n      status = err.status || err.statusCode || status\r\n      continue\r\n    }\r\n    switch (typeof arg) {\r\n      case 'string':\r\n        msg = arg\r\n        break\r\n      case 'number':\r\n        status = arg\r\n        if (i !== 0) {\r\n          deprecate('non-first-argument status code; replace with createError(' + arg + ', ...)')\r\n        }\r\n        break\r\n      case 'object':\r\n        props = arg\r\n        break\r\n    }\r\n  }\r\n\r\n  if (typeof status === 'number' && (status < 400 || status >= 600)) {\r\n    deprecate('non-error status code; use only 4xx or 5xx status codes')\r\n  }\r\n\r\n  if (typeof status !== 'number' ||\r\n    (!statuses[status] && (status < 400 || status >= 600))) {\r\n    status = 500\r\n  }\r\n\r\n  // constructor\r\n  var HttpError = createError[status] || createError[codeClass(status)]\r\n\r\n  if (!err) {\r\n    // create error\r\n    err = HttpError\r\n      ? new HttpError(msg)\r\n      : new Error(msg || statuses[status])\r\n    Error.captureStackTrace(err, createError)\r\n  }\r\n\r\n  if (!HttpError || !(err instanceof HttpError) || err.status !== status) {\r\n    // add properties to generic error\r\n    err.expose = status < 500\r\n    err.status = err.statusCode = status\r\n  }\r\n\r\n  for (var key in props) {\r\n    if (key !== 'status' && key !== 'statusCode') {\r\n      err[key] = props[key]\r\n    }\r\n  }\r\n\r\n  return err\r\n}\r\n\r\n/**\r\n * Create HTTP error abstract base class.\r\n * @private\r\n */\r\n\r\nfunction createHttpErrorConstructor () {\r\n  function HttpError () {\r\n    throw new TypeError('cannot construct abstract class')\r\n  }\r\n\r\n  inherits(HttpError, Error)\r\n\r\n  return HttpError\r\n}\r\n\r\n/**\r\n * Create a constructor for a client error.\r\n * @private\r\n */\r\n\r\nfunction createClientErrorConstructor (HttpError, name, code) {\r\n  var className = name.match(/Error$/) ? name : name + 'Error'\r\n\r\n  function ClientError (message) {\r\n    // create the error object\r\n    var msg = message != null ? message : statuses[code]\r\n    var err = new Error(msg)\r\n\r\n    // capture a stack trace to the construction point\r\n    Error.captureStackTrace(err, ClientError)\r\n\r\n    // adjust the [[Prototype]]\r\n    setPrototypeOf(err, ClientError.prototype)\r\n\r\n    // redefine the error message\r\n    Object.defineProperty(err, 'message', {\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: msg,\r\n      writable: true\r\n    })\r\n\r\n    // redefine the error name\r\n    Object.defineProperty(err, 'name', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      value: className,\r\n      writable: true\r\n    })\r\n\r\n    return err\r\n  }\r\n\r\n  inherits(ClientError, HttpError)\r\n  nameFunc(ClientError, className)\r\n\r\n  ClientError.prototype.status = code\r\n  ClientError.prototype.statusCode = code\r\n  ClientError.prototype.expose = true\r\n\r\n  return ClientError\r\n}\r\n\r\n/**\r\n * Create a constructor for a server error.\r\n * @private\r\n */\r\n\r\nfunction createServerErrorConstructor (HttpError, name, code) {\r\n  var className = name.match(/Error$/) ? name : name + 'Error'\r\n\r\n  function ServerError (message) {\r\n    // create the error object\r\n    var msg = message != null ? message : statuses[code]\r\n    var err = new Error(msg)\r\n\r\n    // capture a stack trace to the construction point\r\n    Error.captureStackTrace(err, ServerError)\r\n\r\n    // adjust the [[Prototype]]\r\n    setPrototypeOf(err, ServerError.prototype)\r\n\r\n    // redefine the error message\r\n    Object.defineProperty(err, 'message', {\r\n      enumerable: true,\r\n      configurable: true,\r\n      value: msg,\r\n      writable: true\r\n    })\r\n\r\n    // redefine the error name\r\n    Object.defineProperty(err, 'name', {\r\n      enumerable: false,\r\n      configurable: true,\r\n      value: className,\r\n      writable: true\r\n    })\r\n\r\n    return err\r\n  }\r\n\r\n  inherits(ServerError, HttpError)\r\n  nameFunc(ServerError, className)\r\n\r\n  ServerError.prototype.status = code\r\n  ServerError.prototype.statusCode = code\r\n  ServerError.prototype.expose = false\r\n\r\n  return ServerError\r\n}\r\n\r\n/**\r\n * Set the name of a function, if possible.\r\n * @private\r\n */\r\n\r\nfunction nameFunc (func, name) {\r\n  var desc = Object.getOwnPropertyDescriptor(func, 'name')\r\n\r\n  if (desc && desc.configurable) {\r\n    desc.value = name\r\n    Object.defineProperty(func, 'name', desc)\r\n  }\r\n}\r\n\r\n/**\r\n * Populate the exports object with constructors for every error class.\r\n * @private\r\n */\r\n\r\nfunction populateConstructorExports (exports, codes, HttpError) {\r\n  codes.forEach(function forEachCode (code) {\r\n    var CodeError\r\n    var name = toIdentifier(statuses[code])\r\n\r\n    switch (codeClass(code)) {\r\n      case 400:\r\n        CodeError = createClientErrorConstructor(HttpError, name, code)\r\n        break\r\n      case 500:\r\n        CodeError = createServerErrorConstructor(HttpError, name, code)\r\n        break\r\n    }\r\n\r\n    if (CodeError) {\r\n      // export the constructor\r\n      exports[code] = CodeError\r\n      exports[name] = CodeError\r\n    }\r\n  })\r\n\r\n  // backwards-compatibility\r\n  exports[\"I'mateapot\"] = deprecate.function(exports.ImATeapot,\r\n    '\"I\\'mateapot\"; use \"ImATeapot\" instead')\r\n}\r\n"]}