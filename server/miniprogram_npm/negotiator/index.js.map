{"version":3,"sources":["index.js","lib\\charset.js","lib\\encoding.js","lib\\language.js","lib\\mediaType.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJaA,ACHA,ACHA,ACHA,ACHA;AJafile":"index.js","sourcesContent":["/*!\r\n * negotiator\r\n * Copyright(c) 2012 Federico Romero\r\n * Copyright(c) 2012-2014 Isaac Z. Schlueter\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Cached loaded submodules.\r\n * @private\r\n */\r\n\r\nvar modules = Object.create(null);\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = Negotiator;\r\nmodule.exports.Negotiator = Negotiator;\r\n\r\n/**\r\n * Create a Negotiator instance from a request.\r\n * @param {object} request\r\n * @public\r\n */\r\n\r\nfunction Negotiator(request) {\r\n  if (!(this instanceof Negotiator)) {\r\n    return new Negotiator(request);\r\n  }\r\n\r\n  this.request = request;\r\n}\r\n\r\nNegotiator.prototype.charset = function charset(available) {\r\n  var set = this.charsets(available);\r\n  return set && set[0];\r\n};\r\n\r\nNegotiator.prototype.charsets = function charsets(available) {\r\n  var preferredCharsets = loadModule('charset').preferredCharsets;\r\n  return preferredCharsets(this.request.headers['accept-charset'], available);\r\n};\r\n\r\nNegotiator.prototype.encoding = function encoding(available) {\r\n  var set = this.encodings(available);\r\n  return set && set[0];\r\n};\r\n\r\nNegotiator.prototype.encodings = function encodings(available) {\r\n  var preferredEncodings = loadModule('encoding').preferredEncodings;\r\n  return preferredEncodings(this.request.headers['accept-encoding'], available);\r\n};\r\n\r\nNegotiator.prototype.language = function language(available) {\r\n  var set = this.languages(available);\r\n  return set && set[0];\r\n};\r\n\r\nNegotiator.prototype.languages = function languages(available) {\r\n  var preferredLanguages = loadModule('language').preferredLanguages;\r\n  return preferredLanguages(this.request.headers['accept-language'], available);\r\n};\r\n\r\nNegotiator.prototype.mediaType = function mediaType(available) {\r\n  var set = this.mediaTypes(available);\r\n  return set && set[0];\r\n};\r\n\r\nNegotiator.prototype.mediaTypes = function mediaTypes(available) {\r\n  var preferredMediaTypes = loadModule('mediaType').preferredMediaTypes;\r\n  return preferredMediaTypes(this.request.headers.accept, available);\r\n};\r\n\r\n// Backwards compatibility\r\nNegotiator.prototype.preferredCharset = Negotiator.prototype.charset;\r\nNegotiator.prototype.preferredCharsets = Negotiator.prototype.charsets;\r\nNegotiator.prototype.preferredEncoding = Negotiator.prototype.encoding;\r\nNegotiator.prototype.preferredEncodings = Negotiator.prototype.encodings;\r\nNegotiator.prototype.preferredLanguage = Negotiator.prototype.language;\r\nNegotiator.prototype.preferredLanguages = Negotiator.prototype.languages;\r\nNegotiator.prototype.preferredMediaType = Negotiator.prototype.mediaType;\r\nNegotiator.prototype.preferredMediaTypes = Negotiator.prototype.mediaTypes;\r\n\r\n/**\r\n * Load the given module.\r\n * @private\r\n */\r\n\r\nfunction loadModule(moduleName) {\r\n  var module = modules[moduleName];\r\n\r\n  if (module !== undefined) {\r\n    return module;\r\n  }\r\n\r\n  // This uses a switch for static require analysis\r\n  switch (moduleName) {\r\n    case 'charset':\r\n      module = require('./lib/charset');\r\n      break;\r\n    case 'encoding':\r\n      module = require('./lib/encoding');\r\n      break;\r\n    case 'language':\r\n      module = require('./lib/language');\r\n      break;\r\n    case 'mediaType':\r\n      module = require('./lib/mediaType');\r\n      break;\r\n    default:\r\n      throw new Error('Cannot find module \\'' + moduleName + '\\'');\r\n  }\r\n\r\n  // Store to prevent invoking require()\r\n  modules[moduleName] = module;\r\n\r\n  return module;\r\n}\r\n","/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredCharsets;\r\nmodule.exports.preferredCharsets = preferredCharsets;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept-Charset header.\r\n * @private\r\n */\r\n\r\nfunction parseAcceptCharset(accept) {\r\n  var accepts = accept.split(',');\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var charset = parseCharset(accepts[i].trim(), i);\r\n\r\n    if (charset) {\r\n      accepts[j++] = charset;\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse a charset from the Accept-Charset header.\r\n * @private\r\n */\r\n\r\nfunction parseCharset(str, i) {\r\n  var match = simpleCharsetRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var charset = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';')\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    charset: charset,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of a charset.\r\n * @private\r\n */\r\n\r\nfunction getCharsetPriority(charset, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(charset, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the charset.\r\n * @private\r\n */\r\n\r\nfunction specify(charset, spec, index) {\r\n  var s = 0;\r\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\r\n    s |= 1;\r\n  } else if (spec.charset !== '*' ) {\r\n    return null\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n}\r\n\r\n/**\r\n * Get the preferred charsets from an Accept-Charset header.\r\n * @public\r\n */\r\n\r\nfunction preferredCharsets(accept, provided) {\r\n  // RFC 2616 sec 14.2: no header = *\r\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all charsets\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullCharset);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getCharsetPriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted charsets\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full charset string.\r\n * @private\r\n */\r\n\r\nfunction getFullCharset(spec) {\r\n  return spec.charset;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n","/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredEncodings;\r\nmodule.exports.preferredEncodings = preferredEncodings;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleEncodingRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept-Encoding header.\r\n * @private\r\n */\r\n\r\nfunction parseAcceptEncoding(accept) {\r\n  var accepts = accept.split(',');\r\n  var hasIdentity = false;\r\n  var minQuality = 1;\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var encoding = parseEncoding(accepts[i].trim(), i);\r\n\r\n    if (encoding) {\r\n      accepts[j++] = encoding;\r\n      hasIdentity = hasIdentity || specify('identity', encoding);\r\n      minQuality = Math.min(minQuality, encoding.q || 1);\r\n    }\r\n  }\r\n\r\n  if (!hasIdentity) {\r\n    /*\r\n     * If identity doesn't explicitly appear in the accept-encoding header,\r\n     * it's added to the list of acceptable encoding with the lowest q\r\n     */\r\n    accepts[j++] = {\r\n      encoding: 'identity',\r\n      q: minQuality,\r\n      i: i\r\n    };\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse an encoding from the Accept-Encoding header.\r\n * @private\r\n */\r\n\r\nfunction parseEncoding(str, i) {\r\n  var match = simpleEncodingRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var encoding = match[1];\r\n  var q = 1;\r\n  if (match[2]) {\r\n    var params = match[2].split(';');\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].trim().split('=');\r\n      if (p[0] === 'q') {\r\n        q = parseFloat(p[1]);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    encoding: encoding,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of an encoding.\r\n * @private\r\n */\r\n\r\nfunction getEncodingPriority(encoding, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(encoding, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the encoding.\r\n * @private\r\n */\r\n\r\nfunction specify(encoding, spec, index) {\r\n  var s = 0;\r\n  if(spec.encoding.toLowerCase() === encoding.toLowerCase()){\r\n    s |= 1;\r\n  } else if (spec.encoding !== '*' ) {\r\n    return null\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n};\r\n\r\n/**\r\n * Get the preferred encodings from an Accept-Encoding header.\r\n * @public\r\n */\r\n\r\nfunction preferredEncodings(accept, provided) {\r\n  var accepts = parseAcceptEncoding(accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all encodings\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullEncoding);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getEncodingPriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted encodings\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getEncoding(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full encoding string.\r\n * @private\r\n */\r\n\r\nfunction getFullEncoding(spec) {\r\n  return spec.encoding;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n","/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredLanguages;\r\nmodule.exports.preferredLanguages = preferredLanguages;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleLanguageRegExp = /^\\s*([^\\s\\-;]+)(?:-([^\\s;]+))?\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept-Language header.\r\n * @private\r\n */\r\n\r\nfunction parseAcceptLanguage(accept) {\r\n  var accepts = accept.split(',');\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var language = parseLanguage(accepts[i].trim(), i);\r\n\r\n    if (language) {\r\n      accepts[j++] = language;\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse a language from the Accept-Language header.\r\n * @private\r\n */\r\n\r\nfunction parseLanguage(str, i) {\r\n  var match = simpleLanguageRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var prefix = match[1],\r\n    suffix = match[2],\r\n    full = prefix;\r\n\r\n  if (suffix) full += \"-\" + suffix;\r\n\r\n  var q = 1;\r\n  if (match[3]) {\r\n    var params = match[3].split(';')\r\n    for (var j = 0; j < params.length; j++) {\r\n      var p = params[j].split('=');\r\n      if (p[0] === 'q') q = parseFloat(p[1]);\r\n    }\r\n  }\r\n\r\n  return {\r\n    prefix: prefix,\r\n    suffix: suffix,\r\n    q: q,\r\n    i: i,\r\n    full: full\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of a language.\r\n * @private\r\n */\r\n\r\nfunction getLanguagePriority(language, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(language, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the language.\r\n * @private\r\n */\r\n\r\nfunction specify(language, spec, index) {\r\n  var p = parseLanguage(language)\r\n  if (!p) return null;\r\n  var s = 0;\r\n  if(spec.full.toLowerCase() === p.full.toLowerCase()){\r\n    s |= 4;\r\n  } else if (spec.prefix.toLowerCase() === p.full.toLowerCase()) {\r\n    s |= 2;\r\n  } else if (spec.full.toLowerCase() === p.prefix.toLowerCase()) {\r\n    s |= 1;\r\n  } else if (spec.full !== '*' ) {\r\n    return null\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s\r\n  }\r\n};\r\n\r\n/**\r\n * Get the preferred languages from an Accept-Language header.\r\n * @public\r\n */\r\n\r\nfunction preferredLanguages(accept, provided) {\r\n  // RFC 2616 sec 14.4: no header = *\r\n  var accepts = parseAcceptLanguage(accept === undefined ? '*' : accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all languages\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullLanguage);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getLanguagePriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted languages\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getLanguage(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full language string.\r\n * @private\r\n */\r\n\r\nfunction getFullLanguage(spec) {\r\n  return spec.full;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n","/**\r\n * negotiator\r\n * Copyright(c) 2012 Isaac Z. Schlueter\r\n * Copyright(c) 2014 Federico Romero\r\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nmodule.exports = preferredMediaTypes;\r\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\r\n\r\n/**\r\n * Parse the Accept header.\r\n * @private\r\n */\r\n\r\nfunction parseAccept(accept) {\r\n  var accepts = splitMediaTypes(accept);\r\n\r\n  for (var i = 0, j = 0; i < accepts.length; i++) {\r\n    var mediaType = parseMediaType(accepts[i].trim(), i);\r\n\r\n    if (mediaType) {\r\n      accepts[j++] = mediaType;\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Parse a media type from the Accept header.\r\n * @private\r\n */\r\n\r\nfunction parseMediaType(str, i) {\r\n  var match = simpleMediaTypeRegExp.exec(str);\r\n  if (!match) return null;\r\n\r\n  var params = Object.create(null);\r\n  var q = 1;\r\n  var subtype = match[2];\r\n  var type = match[1];\r\n\r\n  if (match[3]) {\r\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\r\n\r\n    for (var j = 0; j < kvps.length; j++) {\r\n      var pair = kvps[j];\r\n      var key = pair[0].toLowerCase();\r\n      var val = pair[1];\r\n\r\n      // get the value, unwrapping quotes\r\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\r\n        ? val.substr(1, val.length - 2)\r\n        : val;\r\n\r\n      if (key === 'q') {\r\n        q = parseFloat(value);\r\n        break;\r\n      }\r\n\r\n      // store parameter\r\n      params[key] = value;\r\n    }\r\n  }\r\n\r\n  return {\r\n    type: type,\r\n    subtype: subtype,\r\n    params: params,\r\n    q: q,\r\n    i: i\r\n  };\r\n}\r\n\r\n/**\r\n * Get the priority of a media type.\r\n * @private\r\n */\r\n\r\nfunction getMediaTypePriority(type, accepted, index) {\r\n  var priority = {o: -1, q: 0, s: 0};\r\n\r\n  for (var i = 0; i < accepted.length; i++) {\r\n    var spec = specify(type, accepted[i], index);\r\n\r\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\r\n      priority = spec;\r\n    }\r\n  }\r\n\r\n  return priority;\r\n}\r\n\r\n/**\r\n * Get the specificity of the media type.\r\n * @private\r\n */\r\n\r\nfunction specify(type, spec, index) {\r\n  var p = parseMediaType(type);\r\n  var s = 0;\r\n\r\n  if (!p) {\r\n    return null;\r\n  }\r\n\r\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\r\n    s |= 4\r\n  } else if(spec.type != '*') {\r\n    return null;\r\n  }\r\n\r\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\r\n    s |= 2\r\n  } else if(spec.subtype != '*') {\r\n    return null;\r\n  }\r\n\r\n  var keys = Object.keys(spec.params);\r\n  if (keys.length > 0) {\r\n    if (keys.every(function (k) {\r\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\r\n    })) {\r\n      s |= 1\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return {\r\n    i: index,\r\n    o: spec.i,\r\n    q: spec.q,\r\n    s: s,\r\n  }\r\n}\r\n\r\n/**\r\n * Get the preferred media types from an Accept header.\r\n * @public\r\n */\r\n\r\nfunction preferredMediaTypes(accept, provided) {\r\n  // RFC 2616 sec 14.2: no header = */*\r\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\r\n\r\n  if (!provided) {\r\n    // sorted list of all types\r\n    return accepts\r\n      .filter(isQuality)\r\n      .sort(compareSpecs)\r\n      .map(getFullType);\r\n  }\r\n\r\n  var priorities = provided.map(function getPriority(type, index) {\r\n    return getMediaTypePriority(type, accepts, index);\r\n  });\r\n\r\n  // sorted list of accepted types\r\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\r\n    return provided[priorities.indexOf(priority)];\r\n  });\r\n}\r\n\r\n/**\r\n * Compare two specs.\r\n * @private\r\n */\r\n\r\nfunction compareSpecs(a, b) {\r\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\r\n}\r\n\r\n/**\r\n * Get full type string.\r\n * @private\r\n */\r\n\r\nfunction getFullType(spec) {\r\n  return spec.type + '/' + spec.subtype;\r\n}\r\n\r\n/**\r\n * Check if a spec has any quality.\r\n * @private\r\n */\r\n\r\nfunction isQuality(spec) {\r\n  return spec.q > 0;\r\n}\r\n\r\n/**\r\n * Count the number of quotes in a string.\r\n * @private\r\n */\r\n\r\nfunction quoteCount(string) {\r\n  var count = 0;\r\n  var index = 0;\r\n\r\n  while ((index = string.indexOf('\"', index)) !== -1) {\r\n    count++;\r\n    index++;\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\n/**\r\n * Split a key value pair.\r\n * @private\r\n */\r\n\r\nfunction splitKeyValuePair(str) {\r\n  var index = str.indexOf('=');\r\n  var key;\r\n  var val;\r\n\r\n  if (index === -1) {\r\n    key = str;\r\n  } else {\r\n    key = str.substr(0, index);\r\n    val = str.substr(index + 1);\r\n  }\r\n\r\n  return [key, val];\r\n}\r\n\r\n/**\r\n * Split an Accept header into media types.\r\n * @private\r\n */\r\n\r\nfunction splitMediaTypes(accept) {\r\n  var accepts = accept.split(',');\r\n\r\n  for (var i = 1, j = 0; i < accepts.length; i++) {\r\n    if (quoteCount(accepts[j]) % 2 == 0) {\r\n      accepts[++j] = accepts[i];\r\n    } else {\r\n      accepts[j] += ',' + accepts[i];\r\n    }\r\n  }\r\n\r\n  // trim accepts\r\n  accepts.length = j + 1;\r\n\r\n  return accepts;\r\n}\r\n\r\n/**\r\n * Split a string of parameters.\r\n * @private\r\n */\r\n\r\nfunction splitParameters(str) {\r\n  var parameters = str.split(';');\r\n\r\n  for (var i = 1, j = 0; i < parameters.length; i++) {\r\n    if (quoteCount(parameters[j]) % 2 == 0) {\r\n      parameters[++j] = parameters[i];\r\n    } else {\r\n      parameters[j] += ';' + parameters[i];\r\n    }\r\n  }\r\n\r\n  // trim parameters\r\n  parameters.length = j + 1;\r\n\r\n  for (var i = 0; i < parameters.length; i++) {\r\n    parameters[i] = parameters[i].trim();\r\n  }\r\n\r\n  return parameters;\r\n}\r\n"]}