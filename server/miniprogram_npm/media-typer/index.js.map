{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["/*!\r\n * media-typer\r\n * Copyright(c) 2014 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\r\n *\r\n * parameter     = token \"=\" ( token | quoted-string )\r\n * token         = 1*<any CHAR except CTLs or separators>\r\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\r\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\r\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\r\n *               | \"{\" | \"}\" | SP | HT\r\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\r\n * qdtext        = <any TEXT except <\">>\r\n * quoted-pair   = \"\\\" CHAR\r\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\r\n * TEXT          = <any OCTET except CTLs, but including LWS>\r\n * LWS           = [CRLF] 1*( SP | HT )\r\n * CRLF          = CR LF\r\n * CR            = <US-ASCII CR, carriage return (13)>\r\n * LF            = <US-ASCII LF, linefeed (10)>\r\n * SP            = <US-ASCII SP, space (32)>\r\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\r\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\r\n * OCTET         = <any 8-bit sequence of data>\r\n */\r\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\r\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/\r\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/\r\n\r\n/**\r\n * RegExp to match quoted-pair in RFC 2616\r\n *\r\n * quoted-pair = \"\\\" CHAR\r\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\r\n */\r\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\r\n\r\n/**\r\n * RegExp to match chars that must be quoted-pair in RFC 2616\r\n */\r\nvar quoteRegExp = /([\\\\\"])/g;\r\n\r\n/**\r\n * RegExp to match type in RFC 6838\r\n *\r\n * type-name = restricted-name\r\n * subtype-name = restricted-name\r\n * restricted-name = restricted-name-first *126restricted-name-chars\r\n * restricted-name-first  = ALPHA / DIGIT\r\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\r\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\r\n * restricted-name-chars =/ \".\" ; Characters before first dot always\r\n *                              ; specify a facet name\r\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\r\n *                              ; specify a structured syntax suffix\r\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\r\n * DIGIT =  %x30-39             ; 0-9\r\n */\r\nvar subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\r\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\r\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\r\n\r\n/**\r\n * Module exports.\r\n */\r\n\r\nexports.format = format\r\nexports.parse = parse\r\n\r\n/**\r\n * Format object to media type.\r\n *\r\n * @param {object} obj\r\n * @return {string}\r\n * @api public\r\n */\r\n\r\nfunction format(obj) {\r\n  if (!obj || typeof obj !== 'object') {\r\n    throw new TypeError('argument obj is required')\r\n  }\r\n\r\n  var parameters = obj.parameters\r\n  var subtype = obj.subtype\r\n  var suffix = obj.suffix\r\n  var type = obj.type\r\n\r\n  if (!type || !typeNameRegExp.test(type)) {\r\n    throw new TypeError('invalid type')\r\n  }\r\n\r\n  if (!subtype || !subtypeNameRegExp.test(subtype)) {\r\n    throw new TypeError('invalid subtype')\r\n  }\r\n\r\n  // format as type/subtype\r\n  var string = type + '/' + subtype\r\n\r\n  // append +suffix\r\n  if (suffix) {\r\n    if (!typeNameRegExp.test(suffix)) {\r\n      throw new TypeError('invalid suffix')\r\n    }\r\n\r\n    string += '+' + suffix\r\n  }\r\n\r\n  // append parameters\r\n  if (parameters && typeof parameters === 'object') {\r\n    var param\r\n    var params = Object.keys(parameters).sort()\r\n\r\n    for (var i = 0; i < params.length; i++) {\r\n      param = params[i]\r\n\r\n      if (!tokenRegExp.test(param)) {\r\n        throw new TypeError('invalid parameter name')\r\n      }\r\n\r\n      string += '; ' + param + '=' + qstring(parameters[param])\r\n    }\r\n  }\r\n\r\n  return string\r\n}\r\n\r\n/**\r\n * Parse media type to object.\r\n *\r\n * @param {string|object} string\r\n * @return {Object}\r\n * @api public\r\n */\r\n\r\nfunction parse(string) {\r\n  if (!string) {\r\n    throw new TypeError('argument string is required')\r\n  }\r\n\r\n  // support req/res-like objects as argument\r\n  if (typeof string === 'object') {\r\n    string = getcontenttype(string)\r\n  }\r\n\r\n  if (typeof string !== 'string') {\r\n    throw new TypeError('argument string is required to be a string')\r\n  }\r\n\r\n  var index = string.indexOf(';')\r\n  var type = index !== -1\r\n    ? string.substr(0, index)\r\n    : string\r\n\r\n  var key\r\n  var match\r\n  var obj = splitType(type)\r\n  var params = {}\r\n  var value\r\n\r\n  paramRegExp.lastIndex = index\r\n\r\n  while (match = paramRegExp.exec(string)) {\r\n    if (match.index !== index) {\r\n      throw new TypeError('invalid parameter format')\r\n    }\r\n\r\n    index += match[0].length\r\n    key = match[1].toLowerCase()\r\n    value = match[2]\r\n\r\n    if (value[0] === '\"') {\r\n      // remove quotes and escapes\r\n      value = value\r\n        .substr(1, value.length - 2)\r\n        .replace(qescRegExp, '$1')\r\n    }\r\n\r\n    params[key] = value\r\n  }\r\n\r\n  if (index !== -1 && index !== string.length) {\r\n    throw new TypeError('invalid parameter format')\r\n  }\r\n\r\n  obj.parameters = params\r\n\r\n  return obj\r\n}\r\n\r\n/**\r\n * Get content-type from req/res objects.\r\n *\r\n * @param {object}\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction getcontenttype(obj) {\r\n  if (typeof obj.getHeader === 'function') {\r\n    // res-like\r\n    return obj.getHeader('content-type')\r\n  }\r\n\r\n  if (typeof obj.headers === 'object') {\r\n    // req-like\r\n    return obj.headers && obj.headers['content-type']\r\n  }\r\n}\r\n\r\n/**\r\n * Quote a string if necessary.\r\n *\r\n * @param {string} val\r\n * @return {string}\r\n * @api private\r\n */\r\n\r\nfunction qstring(val) {\r\n  var str = String(val)\r\n\r\n  // no need to quote tokens\r\n  if (tokenRegExp.test(str)) {\r\n    return str\r\n  }\r\n\r\n  if (str.length > 0 && !textRegExp.test(str)) {\r\n    throw new TypeError('invalid parameter value')\r\n  }\r\n\r\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\r\n}\r\n\r\n/**\r\n * Simply \"type/subtype+siffx\" into parts.\r\n *\r\n * @param {string} string\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction splitType(string) {\r\n  var match = typeRegExp.exec(string.toLowerCase())\r\n\r\n  if (!match) {\r\n    throw new TypeError('invalid media type')\r\n  }\r\n\r\n  var type = match[1]\r\n  var subtype = match[2]\r\n  var suffix\r\n\r\n  // suffix after last +\r\n  var index = subtype.lastIndexOf('+')\r\n  if (index !== -1) {\r\n    suffix = subtype.substr(index + 1)\r\n    subtype = subtype.substr(0, index)\r\n  }\r\n\r\n  var obj = {\r\n    type: type,\r\n    subtype: subtype,\r\n    suffix: suffix\r\n  }\r\n\r\n  return obj\r\n}\r\n"]}